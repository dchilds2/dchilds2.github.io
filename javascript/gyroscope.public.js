// Generated by CoffeeScript 1.10.0
(function() {
  var numberFormat,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.GyroscopeAbout = (function() {
    function GyroscopeAbout() {}

    GyroscopeAbout.prototype.init = function() {};

    return GyroscopeAbout;

  })();

  window.GyroscopePublic = (function() {
    function GyroscopePublic() {
      this.subscribe = new GyroscopeSubscribe();
      this.home = new GyroscopeHome();
      this.about = new GyroscopeAbout();
      this.setup = new GyroscopeSetup();
      this.download = new GyroscopeDownload();
      this.labs = new GyroscopeLabs();
      this.pokemon = new GyroscopePokemon();
      this.login = new GyroscopeLogin();
      this.signup = new GyroscopeSignup();
      this.bindChromeInstall();
    }

    GyroscopePublic.prototype.init = function(section, page) {
      if ((section === 'home') && (page === 'landing')) {
        return this.home.initLanding();
      } else if ((section === 'home') && (page === 'features')) {
        return this.home.initFeatures();
      } else if (section === 'deck') {
        this.home.cleanup();
        return timeoutSet(1200, function() {
          return $('#page').append('<script async src="//platform.vine.co/static/scripts/embed.js" charset="utf-8"></script>');
        });
      } else if (section === 'about') {
        this.home.measureExpandables();
        this.home.scrollwatch = true;
        this.home.updateScrollPosition();
        return this.about.init();
      } else if (section === 'setup') {
        this.home.measureExpandables();
        this.home.scrollwatch = true;
        this.home.updateScrollPosition();
        this.setup.init();
        timeoutSet(50, (function(_this) {
          return function() {
            return _this.loadTwitterJs();
          };
        })(this));
        return timeoutSet(100, (function(_this) {
          return function() {
            return _this.loadFacebookJs();
          };
        })(this));
      } else if (section === 'download') {
        return this.download.init();
      } else if (section === 'labs') {
        return this.labs.init(section, page);
      } else if (section === 'pokemon') {
        return this.pokemon.init();
      } else if (section === 'sleep') {
        return this.home.initSleep();
      } else if (section === 'chrome') {
        timeoutSet(300, (function(_this) {
          return function() {
            return _this.loadTwitterJs();
          };
        })(this));
        timeoutSet(500, (function(_this) {
          return function() {
            return _this.loadFacebookJs();
          };
        })(this));
        return this.checkChromeInstall();
      } else if (section === 'login_email' || section === 'forgot_password') {
        return this.login.init();
      } else if (section === 'signup') {
        return this.signup.init();
      } else {
        return this.home.cleanup();
      }
    };

    GyroscopePublic.prototype.updateState = function() {
      return this.setup.updateState();
    };

    GyroscopePublic.prototype.loadFacebookJs = function() {
      var el;
      el = '<div id="fb-root"></div>\n<script>(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&appId=309431422557180&version=v2.0";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, \'script\', \'facebook-jssdk\'));</script>';
      return $('#page').append(el);
    };

    GyroscopePublic.prototype.loadTwitterJs = function() {
      return $('#page').append('<script async src="//platform.twitter.com/widgets.js" charset="utf-8" />');
    };

    GyroscopePublic.prototype.bindChromeInstall = function() {
      return $(document).on('click', '.chrome-install-link', (function(_this) {
        return function(e) {
          var url;
          if (chrome) {
            e.preventDefault();
            url = 'https://chrome.google.com/webstore/detail/ifakdojghbjeahenejfpgdfhhcmjgfle';
            chrome.webstore.install(url, function(details) {
              return console.log(details);
            }, function(details) {
              return console.log('failure', details);
            });
            if (fbq) {
              return fbq('track', "Lead");
            }
          }
        };
      })(this));
    };

    GyroscopePublic.prototype.checkChromeInstall = function() {
      var file, id;
      id = 'ifakdojghbjeahenejfpgdfhhcmjgfle';
      file = 'chrome-extension://' + id + '/info.txt';
      $.ajax({
        url: file,
        method: 'GET',
        dataType: 'text',
        success: (function(_this) {
          return function(data) {
            if (data) {
              return $('.chrome-page').addClass('installed');
            }
          };
        })(this)
      });
      if (!chrome) {
        return $('#device-info').addClass('not-chrome');
      } else {
        return $('#device-info').addClass('is-chrome');
      }
    };

    return GyroscopePublic;

  })();

  window.GyroscopeDownload = (function() {
    function GyroscopeDownload() {
      this.bindDownloadButton();
    }

    GyroscopeDownload.prototype.init = function() {};

    GyroscopeDownload.prototype.bindDownloadButton = function() {
      return $(document).on('click', '.download-app.button', (function(_this) {
        return function(e) {
          var link, url;
          e.preventDefault();
          link = $(e.currentTarget);
          url = link.attr('href');
          if (!url) {
            return;
          }
          return _this.triggerDownload(url);
        };
      })(this));
    };

    GyroscopeDownload.prototype.triggerDownload = function(url) {
      window.location.replace(url);
      return timeoutSet(400, function() {
        return $('body').addClass('downloading');
      });
    };

    return GyroscopeDownload;

  })();

  window.GyroscopeHome = (function() {
    function GyroscopeHome() {
      L.mapbox.accessToken = 'pk.eyJ1IjoiZ3lyb3Njb3BlIiwiYSI6ImNQb0ZFQXMifQ.02b2nGQcu4-DYKSyYsenHg';
      this.bindResize();
      this.bindScroll();
      this.bindSpinner();
    }

    GyroscopeHome.prototype.initLanding = function() {
      timeoutSet(280, (function(_this) {
        return function() {
          return _this.spinLogo($('#page .home-header'));
        };
      })(this));
      $('body').removeClass('checkpoint1 checkpoint2');
      this.bindTiles();
      this.measureExpandables();
      return this.scrollwatch = true;
    };

    GyroscopeHome.prototype.initSleep = function() {};

    GyroscopeHome.prototype.bindTiles = function() {
      $(document).on('click', '.flippable.square', (function(_this) {
        return function(e) {
          var item;
          e.preventDefault();
          e.stopPropagation();
          item = $(e.currentTarget);
          $('#page .square.opened').not(item).removeClass('opened');
          if (item.hasClass('opened')) {
            item.removeClass('opened');
            $('body').removeClass('item-focused');
            return _this.openedCard = false;
          } else {
            item.addClass('opened');
            $('body').addClass('item-focused');
            return _this.openedCard = true;
          }
        };
      })(this));
      $(document).on('click', '.blocks .topside', (function(_this) {
        return function(e) {
          if (_this.openedCard) {
            e.preventDefault();
            $('#page .square.opened').removeClass('opened');
            $('body').removeClass('item-focused');
            return _this.openedCard = false;
          }
        };
      })(this));
      return $(document).on('mouseenter', '.flippable.square', (function(_this) {
        return function(e) {
          var item;
          e.preventDefault();
          console.log('click');
          item = $(e.currentTarget);
          if (item.hasClass('opened')) {
            return;
          }
          $('#page .square.opened').not(item).removeClass('opened');
          _this.openedCard = false;
          return $('body').removeClass('item-focused');
        };
      })(this));
    };

    GyroscopeHome.prototype.initFeatures = function() {
      this.scrollwatch = true;
      this.setupPreview();
      return this.measureExpandables();
    };

    GyroscopeHome.prototype.cleanup = function() {
      return this.scrollwatch = false;
    };

    GyroscopeHome.prototype.spinLogo = function(el) {
      if (el) {
        return $('.spinning.logo', el).removeClass('stopped').addClass('started');
      } else {
        return $('#page .spinning.logo').removeClass('stopped').addClass('started');
      }
    };

    GyroscopeHome.prototype.updateScrollPosition = function() {
      this.scrolled = $(document).scrollTop();
      return this.updateExpandables();
    };

    GyroscopeHome.prototype.measureExpandables = function() {
      this.height = $(window).height();
      this.pageHeight = $('#page').height();
      this.velocity = 0.1;
      this.lastScrolled = 0;
      this.tileBoost = 0;
      $('#page .expandable').each((function(_this) {
        return function(n, el) {
          var eHeight, expandable;
          expandable = $(el);
          eHeight = expandable.height();
          return expandable.attr('data-top', expandable.offset().top).attr('data-height', eHeight);
        };
      })(this));
      return this.updateExpandables();
    };

    GyroscopeHome.prototype.updateExpandables = function() {
      var body, checkpoint3reached, directionclass, end_class, end_threshold, middle_class, middle_threshold, show_threshold, showing_class, speedclass;
      show_threshold = 0.14 * this.height;
      middle_threshold = 0.45 * this.height;
      end_threshold = 0.82 * this.height;
      showing_class = 'showing';
      middle_class = 'in-middle';
      end_class = 'at-end';
      checkpoint3reached = false;
      $('#page .expandable').each((function(_this) {
        return function(n, el) {
          var expandable, height, top;
          expandable = $(el);
          top = parseInt(expandable.attr('data-top'));
          height = parseInt(expandable.attr('data-height'));
          if (_this.scrolled + _this.height - show_threshold > top) {
            if (expandable.hasClass('locked')) {
              _this.unlockExpandable(expandable);
              timeoutSet(600, function() {
                return _this.spinLogo(expandable);
              });
            }
            expandable.addClass(showing_class);
            if (_this.scrolled + _this.height - middle_threshold > top) {
              expandable.addClass(middle_class);
              if (expandable.hasClass('bottom-actions')) {
                checkpoint3reached = true;
              }
              if (_this.scrolled + _this.height - end_threshold > top + height) {
                return expandable.addClass(end_class);
              } else {
                return expandable.removeClass(end_class);
              }
            } else {
              expandable.removeClass(middle_class);
              return expandable.removeClass(end_class);
            }
          } else {
            expandable.removeClass(showing_class);
            expandable.removeClass(middle_class);
            return expandable.removeClass(end_class);
          }
        };
      })(this));
      body = $('body');
      if (this.scrolled > 800) {
        if (this.scrolled > 0.8 * this.pageHeight) {
          body.addClass('checkpoint1').addClass('checkpoint2');
          body.toggleClass('checkpoint3', checkpoint3reached);
        } else {
          body.addClass('checkpoint1').removeClass('checkpoint2 checkpoint3');
        }
      } else {
        body.removeClass('checkpoint1 checkpoint2 checkpoint3');
      }
      if (!this.velocity) {
        this.velocity = 0.1;
      }
      this.velocity = (this.velocity * 0.08) * Math.abs(this.lastScrolled - this.scrolled);
      if (this.lastScrolled < this.scrolled) {
        this.direction = 'down';
      } else {
        this.direction = 'up';
      }
      if (this.openedCard) {
        if (this.velocity > 0.15 && Math.abs(this.lastScrolled - this.scrolled) > 10) {
          $('body').removeClass('item-focused');
          $('#page .square.opened').removeClass('opened');
        }
      }
      this.velocity = Math.max(0.1, this.velocity);
      this.velocity = Math.min(1100, this.velocity);
      this.lastScrolled = this.scrolled;
      speedclass = '';
      if (this.scrolled > 10) {
        if (this.velocity > 800) {
          speedclass = 'fast-scroll';
        } else if (this.velocity < 50) {
          speedclass = 'slow-scroll';
        }
      }
      if (this.direction === 'down') {
        directionclass = 'scrolling-down';
      } else {
        directionclass = 'scrolling-up';
      }
      return body.removeClass('fast-scroll slow-scroll scrolling-up scrolling-down').addClass(speedclass).addClass(directionclass);
    };

    GyroscopeHome.prototype.unlockExpandable = function(expandable) {
      return expandable.removeClass('locked').addClass('unlocked');
    };

    GyroscopeHome.prototype.bindResize = function() {
      return $(window).resize($.debounce(500, false, (function(_this) {
        return function(e) {
          return _this.measureExpandables();
        };
      })(this)));
    };

    GyroscopeHome.prototype.bindScroll = function() {
      return $(window).scroll($.throttle(166, (function(_this) {
        return function(e) {
          if (!_this.scrollwatch) {
            return;
          }
          return _this.updateScrollPosition();
        };
      })(this)));
    };

    GyroscopeHome.prototype.bindSpinner = function() {
      this.previewing = 'sport';
      $(document).on('mouseenter', '.preview .sections-nav a', (function(_this) {
        return function(e) {
          var li, link, section;
          if (!$('body').hasClass('animating')) {
            return;
          }
          link = $(e.currentTarget);
          li = link.parents('li');
          section = li.attr('class');
          if (section === _this.previewing) {
            return;
          }
          return _this.switchHomePreviewTo(section);
        };
      })(this));
      return $(document).on('click', '.preview .plane a.skipped', (function(_this) {
        return function(e) {
          var link, section;
          e.preventDefault();
          e.stopPropagation();
          link = $(e.currentTarget);
          section = link.attr('data-section');
          if ((!section) || (section === 'home')) {
            return;
          }
          _this.switchHomePreviewTo(section);
          return false;
        };
      })(this));
    };

    GyroscopeHome.prototype.plotPoint = function(el, size) {
      var coords, latitude, longitude;
      size = size || 'large';
      latitude = el.data('latitude');
      longitude = el.data('longitude');
      coords = this.getMapProjection(size)([longitude, latitude]);
      el.css({
        left: parseInt(coords[0]),
        top: parseInt(coords[1])
      }).addClass('positioned');
      return timeoutSet(450, function() {
        return el.addClass('showing');
      });
    };

    GyroscopeHome.prototype.getMapProjection = function(size) {
      var height, projection, translation, width;
      if (size === 'small') {
        width = 240;
        height = 160;
        translation = 1.4;
      } else {
        width = 700;
        height = 320;
        translation = 1;
      }
      return projection = d3.geo.mercator().scale((width + 1) / 2 / Math.PI).translate([width / 2, translation * height / 2]).precision(.1);
    };

    return GyroscopeHome;

  })();

  window.GyroscopeLabs = (function() {
    function GyroscopeLabs() {
      this.bindFeatures();
    }

    GyroscopeLabs.prototype.init = function(section, page) {
      return console.log('opening', section, page);
    };

    GyroscopeLabs.prototype.bindFeatures = function() {
      $(document).on('click', '.labs-opt-in .request', (function(_this) {
        return function(e) {
          var actions, link, url;
          e.preventDefault();
          actions = $(e.currentTarget).parents('.actions');
          actions.addClass('opted-in');
          link = $(e.currentTarget);
          url = link.data('url');
          if (_this.requestFeature) {
            _this.requestFeature.abort();
          }
          if (_this.unRequestFeature) {
            _this.unRequestFeature.abort();
          }
          return _this.requestFeature = $.ajax({
            method: 'POST',
            dataType: 'json',
            url: url,
            data: '{}'
          });
        };
      })(this));
      return $(document).on('click', '.labs-opt-in .cancel', (function(_this) {
        return function(e) {
          var actions, link, url;
          e.preventDefault();
          actions = $(e.currentTarget).parents('.actions');
          actions.removeClass('opted-in');
          link = $(e.currentTarget);
          url = link.data('url');
          if (_this.requestFeature) {
            _this.requestFeature.abort();
          }
          if (_this.unRequestFeature) {
            _this.unRequestFeature.abort();
          }
          return _this.unRequestFeature = $.ajax({
            method: 'DELETE',
            dataType: 'json',
            url: url,
            data: '{}'
          });
        };
      })(this));
    };

    return GyroscopeLabs;

  })();

  window.GyroscopeLogin = (function() {
    function GyroscopeLogin() {
      this.bindLoginForm();
      this.bindPasswordForm();
    }

    GyroscopeLogin.prototype.init = function() {
      timeoutSet(320, (function(_this) {
        return function() {
          return $('#page .spinning.logo').removeClass('stopped').addClass('started');
        };
      })(this));
      return timeoutSet(280, (function(_this) {
        return function() {
          return $('.login-form .email .text-input').focus();
        };
      })(this));
    };

    GyroscopeLogin.prototype.bindPasswordForm = function() {
      return $(document).on('click', '.forgot-form .login-button', (function(_this) {
        return function(e) {
          var form;
          e.preventDefault();
          form = $(e.currentTarget).parents('.forgot-form');
          return $('.login-submit', form).click();
        };
      })(this));
    };

    GyroscopeLogin.prototype.bindLoginForm = function() {
      $(document).on('submit', '.login-form', (function(_this) {
        return function(e) {
          var email, form, password;
          e.preventDefault();
          form = $(e.currentTarget);
          console.log('Submitting form');
          email = $('.for-email', form);
          if (!email.val()) {
            _this.formWarning('Please enter an email address to log in');
            return false;
          }
          password = $('.for-password', form);
          if (!password.val()) {
            _this.formWarning('Please enter your password to log in');
            return false;
          }
          return _this.submitForm(form);
        };
      })(this));
      return $(document).on('click', '.login-form .login-button', (function(_this) {
        return function(e) {
          var form;
          e.preventDefault();
          form = $(e.currentTarget).parents('.login-form');
          return $('.login-submit', form).click();
        };
      })(this));
    };

    GyroscopeLogin.prototype.formWarning = function(message) {
      return alert(message);
    };

    GyroscopeLogin.prototype.submitForm = function(form) {
      var data;
      data = form.serialize();
      if (this.loginFormSubmit) {
        this.loginFormSubmit.abort();
      }
      this.loginFormSubmit = $.ajax({
        method: 'post',
        dataType: 'json',
        url: form.attr('action'),
        data: data,
        success: (function(_this) {
          return function(data) {
            console.log('Logged in!!');
            return _this.loginSuccess();
          };
        })(this),
        error: (function(_this) {
          return function(data) {
            console.log("Error logging in");
            return _this.loginFailure();
          };
        })(this)
      });
    };

    GyroscopeLogin.prototype.loginSuccess = function() {
      var redir;
      $('body').addClass('logged-in');
      if (redir = $('#next-redirect').val()) {
        return window.location.replace(redir);
      } else {
        return window.location.replace('/activate/');
      }
    };

    GyroscopeLogin.prototype.loginFailure = function() {
      return this.showLoginErrorMessage('That email address or password is not valid. Please make sure you enter the email and password correctly.');
    };

    GyroscopeLogin.prototype.showLoginErrorMessage = function(message) {
      return $('#page .login-error-message').html('<p>' + message + '</p>');
    };

    return GyroscopeLogin;

  })();

  window.GyroscopePokemon = (function() {
    function GyroscopePokemon() {
      this.pokemon = [
        {
          date: '2016-06-27',
          label: 'June 27',
          average: 6586
        }, {
          date: '2016-06-28',
          label: 'June 28',
          average: 6885
        }, {
          date: '2016-06-29',
          label: 'June 29',
          average: 6680
        }, {
          date: '2016-06-30',
          label: 'June 30',
          average: 5975
        }, {
          date: '2016-07-01',
          label: 'July 01',
          average: 5920
        }, {
          date: '2016-07-02',
          label: 'July 02',
          average: 6130,
          weekend: true
        }, {
          date: '2016-07-03',
          label: 'July 03',
          average: 6159,
          weekend: true
        }, {
          date: '2016-07-04',
          label: 'July 04',
          average: 5835
        }, {
          date: '2016-07-05',
          label: 'July 05',
          average: 5992
        }, {
          date: '2016-07-06',
          label: 'July 06',
          average: 6432
        }, {
          date: '2016-07-07',
          label: 'July 07',
          average: 6876,
          released: true
        }, {
          date: '2016-07-08',
          label: 'July 08',
          average: 9466,
          released: true
        }, {
          date: '2016-07-09',
          label: 'July 09',
          average: 9164,
          weekend: true,
          released: true
        }, {
          date: '2016-07-10',
          label: 'July 10',
          average: 7835,
          weekend: true,
          released: true
        }, {
          date: '2016-07-11',
          label: 'July 11',
          average: 7527,
          released: true
        }, {
          date: '2016-07-12',
          label: 'July 12',
          average: 8306,
          released: true
        }, {
          date: '2016-07-13',
          label: 'July 13',
          average: 7886,
          released: true
        }, {
          date: '2016-07-14',
          label: 'July 14',
          average: 8368,
          released: true
        }, {
          date: '2016-07-15',
          label: 'July 15',
          average: 9387,
          released: true
        }, {
          date: '2016-07-16',
          label: 'July 16',
          average: 8244,
          weekend: true,
          released: true
        }
      ];
      this.control = [
        {
          date: '2016-06-06',
          label: 'June 06',
          average: 5102
        }, {
          date: '2016-06-07',
          label: 'June 07',
          average: 5186
        }, {
          date: '2016-06-08',
          label: 'June 08',
          average: 5155
        }, {
          date: '2016-06-09',
          label: 'June 09',
          average: 5175
        }, {
          date: '2016-06-10',
          label: 'June 10',
          average: 5367
        }, {
          date: '2016-06-11',
          label: 'June 11',
          average: 5557,
          weekend: true
        }, {
          date: '2016-06-12',
          label: 'June 12',
          average: 5186,
          weekend: true
        }, {
          date: '2016-06-13',
          label: 'June 13',
          average: 4923
        }, {
          date: '2016-06-14',
          label: 'June 14',
          average: 5185
        }, {
          date: '2016-06-15',
          label: 'June 15',
          average: 5211
        }, {
          date: '2016-06-16',
          label: 'June 16',
          average: 5291
        }, {
          date: '2016-06-17',
          label: 'June 17',
          average: 5603
        }, {
          date: '2016-06-18',
          label: 'June 18',
          average: 5922,
          weekend: true
        }, {
          date: '2016-06-19',
          label: 'June 19',
          average: 5197,
          weekend: true
        }, {
          date: '2016-06-20',
          label: 'June 20',
          average: 4855
        }, {
          date: '2016-06-21',
          label: 'June 21',
          average: 5144
        }, {
          date: '2016-06-22',
          label: 'June 22',
          average: 5154
        }, {
          date: '2016-06-23',
          label: 'June 23',
          average: 5185
        }, {
          date: '2016-06-24',
          label: 'June 24',
          average: 5273
        }, {
          date: '2016-06-25',
          label: 'June 25',
          average: 5533,
          weekend: true
        }, {
          date: '2016-06-26',
          label: 'June 26',
          average: 5110,
          weekend: true
        }, {
          date: '2016-06-27',
          label: 'June 27',
          average: 4746
        }, {
          date: '2016-06-28',
          label: 'June 28',
          average: 4896
        }, {
          date: '2016-06-29',
          label: 'June 29',
          average: 4917
        }, {
          date: '2016-06-30',
          label: 'June 30',
          average: 5045
        }, {
          date: '2016-07-01',
          label: 'July 01',
          average: 5109
        }, {
          date: '2016-07-02',
          label: 'July 02',
          average: 5332,
          weekend: true
        }, {
          date: '2016-07-03',
          label: 'July 03',
          average: 4995,
          weekend: true
        }, {
          date: '2016-07-04',
          label: 'July 04',
          average: 4842
        }, {
          date: '2016-07-05',
          label: 'July 05',
          average: 4727
        }, {
          date: '2016-07-06',
          label: 'July 06',
          average: 4708
        }, {
          date: '2016-07-07',
          label: 'July 07',
          average: 4723,
          released: true
        }, {
          date: '2016-07-08',
          label: 'July 08',
          average: 4870,
          released: true
        }, {
          date: '2016-07-09',
          label: 'July 09',
          average: 5198,
          weekend: true,
          released: true
        }, {
          date: '2016-07-10',
          label: 'July 10',
          average: 4778,
          weekend: true,
          released: true
        }, {
          date: '2016-07-11',
          label: 'July 11',
          average: 4607,
          released: true
        }, {
          date: '2016-07-12',
          label: 'July 12',
          average: 4578,
          released: true
        }, {
          date: '2016-07-13',
          label: 'July 13',
          average: 4646,
          released: true
        }, {
          date: '2016-07-14',
          label: 'July 14',
          average: 4614,
          released: true
        }, {
          date: '2016-07-15',
          label: 'July 15',
          average: 4694,
          released: true
        }, {
          date: '2016-07-16',
          label: 'July 16',
          average: 4826,
          weekend: true,
          released: true
        }
      ];
    }

    GyroscopePokemon.prototype.init = function() {
      return this.plot();
    };

    GyroscopePokemon.prototype.plot = function() {
      var controlElements, day, graph1, graph2, height, i, j, len, len1, max, pokemonElements, ref, ref1;
      max = 10000;
      graph1 = $('#page .graph.control-group');
      controlElements = '';
      ref = this.control;
      for (i = 0, len = ref.length; i < len; i++) {
        day = ref[i];
        height = (day.average / max) * 100;
        controlElements += '<div class="day' + (day.weekend ? ' weekend' : '') + '">';
        controlElements += '<span class="fill" style="height: ' + height + '%">';
        controlElements += '<span class="number-label">' + numberFormat(day.average) + '</span>';
        controlElements += '</span>';
        controlElements += '<span class="day-label">' + day.label + '</span>';
        controlElements += '</div>';
      }
      graph1.html(controlElements);
      pokemonElements = '';
      graph2 = $('#page .graph.experimental-group');
      ref1 = this.pokemon;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        day = ref1[j];
        height = (day.average / max) * 100;
        pokemonElements += '<div class="day' + (day.weekend ? ' weekend' : '') + '">';
        pokemonElements += '<span class="fill' + (day.released ? ' released' : ' x') + '" style="height: ' + height + '%">';
        pokemonElements += '<span class="number-label">' + numberFormat(day.average) + '</span>';
        pokemonElements += '</span>';
        pokemonElements += '<span class="day-label">' + day.label + '</span>';
        pokemonElements += '</div>';
      }
      return graph2.html(pokemonElements);
    };

    return GyroscopePokemon;

  })();

  numberFormat = function(number) {
    if (!number) {
      return '';
    }
    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  };

  window.GyroscopeSetup = (function() {
    function GyroscopeSetup() {}

    GyroscopeSetup.prototype.init = function() {
      this.state = $('#user-state').first();
      if (!this.state.length) {
        return;
      }
      this.content_ids = [];
      this.polling = [];
      this.finished = [];
      this.frequency = {};
      this.setupPolling();
      this.updateConnectedClasses();
      return timeoutSet(800, (function(_this) {
        return function() {
          return _this.startPolling();
        };
      })(this));
    };

    GyroscopeSetup.prototype.startPolling = function() {
      this.loadContent('photos');
      timeoutSet(50, (function(_this) {
        return function() {
          return _this.loadContent('visits');
        };
      })(this));
      timeoutSet(170, (function(_this) {
        return function() {
          return _this.loadContent('activity');
        };
      })(this));
      timeoutSet(310, (function(_this) {
        return function() {
          return _this.loadContent('vitals');
        };
      })(this));
      return timeoutSet(570, (function(_this) {
        return function() {
          return _this.loadContent('productivity');
        };
      })(this));
    };

    GyroscopeSetup.prototype.setupPolling = function() {
      if (this.state.hasClass('added-moves' || this.state.hasClass('added-foursquare'))) {
        this.polling.push('visits');
      }
      if ((this.state.hasClass('added-instagram')) || (this.state.hasClass('added-twitter'))) {
        this.polling.push('photos');
      }
      if ((this.state.hasClass('added-runkeeper')) || (this.state.hasClass('added-strava')) || (this.state.hasClass('added-moves')) || (this.state.hasClass('added-foursquare'))) {
        this.polling.push('activity');
      }
      if ((this.state.hasClass('added-google')) || (this.state.hasClass('added-withings')) || (this.state.hasClass('added-fitbit')) || (this.state.hasClass('added-jawbone'))) {
        this.polling.push('vitals');
      }
      if (this.state.hasClass('added-rescuetime' || this.state.hasClass('added-github'))) {
        return this.polling.push('productivity');
      }
    };

    GyroscopeSetup.prototype.loadContent = function(type) {
      if (type !== 'visits' && type !== 'photos' && type !== 'activity' && type !== 'vitals' && type !== 'productivity') {
        return;
      }
      if (this.canFetch(type)) {
        return $.ajax({
          url: '/setup/data/' + type + '/',
          method: 'GET',
          dataType: 'html',
          success: (function(_this) {
            return function(response) {
              return _this.updateContent(type, response);
            };
          })(this)
        });
      }
    };

    GyroscopeSetup.prototype.canFetch = function(type) {
      return (indexOf.call(this.polling, type) >= 0) && !(indexOf.call(this.finished, type) >= 0);
    };

    GyroscopeSetup.prototype.updateContent = function(type, response) {
      var cache, data, freq, newcontent, slices;
      if (!(type && response)) {
        return;
      }
      data = $('#page .setup-steps .' + type + '-data');
      cache = $('.cache', data);
      if (!(data.length && cache.length)) {
        return;
      }
      newcontent = false;
      slices = $('.slice', response);
      if (slices.length > 5) {
        this.finished.push(type);
      }
      slices.each((function(_this) {
        return function(n, el) {
          var id, slice;
          slice = $(el);
          id = slice.attr('data-id');
          if (!(indexOf.call(_this.content_ids, id) >= 0)) {
            cache.append(slice);
            _this.content_ids.push(id);
            return newcontent = true;
          }
        };
      })(this));
      if (newcontent) {
        return this.popCache(data, cache);
      } else {
        freq = this.frequency[type] || 1500;
        timeoutSet(freq, (function(_this) {
          return function() {
            return _this.loadContent(type);
          };
        })(this));
        return this.frequency[type] = freq * 2;
      }
    };

    GyroscopeSetup.prototype.popCache = function(data, cache) {
      var slice, slices;
      if (cache.children().length) {
        slice = cache.children().last();
        slice.addClass('new');
        slices = $('.slices', data);
        slices.prepend(slice);
        timeoutSet(20, function() {
          return $('.new.slice', slices).removeClass('new');
        });
      }
      if (cache.children().length) {
        return timeoutSet(320, (function(_this) {
          return function() {
            return _this.popCache(data, cache);
          };
        })(this));
      }
    };

    GyroscopeSetup.prototype.updateState = function() {
      console.log('update state');
      return $.ajax({
        url: '/api/v1/account/state/',
        method: 'GET',
        dataType: 'json',
        success: (function(_this) {
          return function(data) {
            _this.updateStateClasses(data.classes);
            return _this.startPolling();
          };
        })(this)
      });
    };

    GyroscopeSetup.prototype.updateStateClasses = function(classes) {
      var status;
      status = $('#user-state').first().attr('class', classes);
      return this.updateConnectedClasses();
    };

    GyroscopeSetup.prototype.updateConnectedClasses = function() {
      var added, i, len, results, service, services;
      if (!this.state.length) {
        return;
      }
      services = ['instagram', 'twitter', 'moves', 'foursquare', 'runkeeper', 'strava', 'fitbit', 'jawbone', 'withings', 'rescuetime'];
      results = [];
      for (i = 0, len = services.length; i < len; i++) {
        service = services[i];
        added = this.state.hasClass('added-' + service);
        $('#page .checklist li.' + service).toggleClass('connected', added);
        results.push($('#page .checklist li.' + service).toggleClass('clickable', !added));
      }
      return results;
    };

    return GyroscopeSetup;

  })();

  window.GyroscopeSignup = (function() {
    function GyroscopeSignup() {
      this.bindSignupForm();
      this.bindUsernameCheck();
      this.bindEmailCheck();
      this.bindDateConverter();
    }

    GyroscopeSignup.prototype.init = function() {
      timeoutSet(320, (function(_this) {
        return function() {
          return $('#page .spinning.logo').removeClass('stopped').addClass('started');
        };
      })(this));
      timeoutSet(280, (function(_this) {
        return function() {
          return $('.signup-form .first-name .text-input').focus();
        };
      })(this));
      this.loadTimezone();
      this.username_settings = $('#page .username-label').first();
      this.current_username = '';
      this.last_username = this.username_settings.find('.username-field').val();
      this.email_settings = $('#page .email-label').first();
      this.current_email = '';
      this.last_email = this.email_settings.find('.email-field').val();
      return $('#page .text-input').first().focus();
    };

    GyroscopeSignup.prototype.bindSignupForm = function() {
      $(document).on('submit', '.signup-form', (function(_this) {
        return function(e) {
          var email, form;
          e.preventDefault();
          form = $(e.currentTarget);
          console.log('Submitting form');
          email = $('.for-email', form);
          if (!email.val()) {
            _this.formWarning('Please enter an email address');
            return;
          }
          if (!_this.validEmail) {
            _this.formWarning('Please enter an email address that is valid and has not already been used. Have you already signed up before?');
            return;
          }
          if (!_this.validUsername) {
            _this.formWarning('Please choose a valid username that is not yet taken! If you have already signed up, log in to your previous account instead of creating a new one.');
            return;
          }
          return _this.submitForm(form);
        };
      })(this));
      return $(document).on('click', '.signup-form .create-account-button', (function(_this) {
        return function(e) {
          var form;
          e.preventDefault();
          form = $(e.currentTarget).parents('.signup-form');
          return $('.form-submit', form).click();
        };
      })(this));
    };

    GyroscopeSignup.prototype.submitForm = function(form) {
      var data;
      data = form.serialize();
      if (this.signupFormSubmit) {
        this.signupFormSubmit.abort();
      }
      this.signupFormSubmit = $.ajax({
        method: 'post',
        dataType: 'json',
        url: form.attr('action'),
        data: data,
        success: (function(_this) {
          return function(data) {
            if (data.status === 'ok') {
              return _this.loginSuccess();
            } else {
              if (data.error) {
                return _this.signupErrorMessage(data.error);
              } else {
                return _this.signupErrorMessage('Please fill out all of the required fields properly.');
              }
            }
          };
        })(this),
        error: (function(_this) {
          return function(data) {
            if (data && data.error) {
              return _this.signupErrorMessage(data.error);
            } else {
              return _this.signupErrorMessage('Please fill out all of the required fields properly.');
            }
          };
        })(this)
      });
    };

    GyroscopeSignup.prototype.signupErrorMessage = function(data) {
      console.log(data);
      if (data.error) {
        return this.formWarning(data.error);
      } else {
        return this.formWarning('Something was invalid about your signup attempt. Please fill out the form again.');
      }
    };

    GyroscopeSignup.prototype.formWarning = function(message) {
      $('#page .signup-error-message').html('<p>' + message + '</p>');
      return window.scrollTo(0, 1);
    };

    GyroscopeSignup.prototype.loginSuccess = function() {
      return $('body').addClass('signup-successful');
    };

    GyroscopeSignup.prototype.loadTimezone = function() {
      var offset, tz;
      tz = (new Date()).getTimezoneOffset();
      offset = tz / 60 * -1;
      if (offset) {
        $('.signup-form .for-timezone').val(offset);
        console.log('Setting timezone to', offset);
      } else {
        $('.signup-form .for-timezone').val(0);
        console.log('No timezone found, setting to 0');
      }
      return $('.signup-form .timezone-label').addClass('hidden');
    };

    GyroscopeSignup.prototype.bindUsernameCheck = function() {
      $(document).on('keypress', '.signup-form .username-field', (function(_this) {
        return function(e) {
          var input;
          input = $(e.currentTarget);
          return timeoutSet(10, function() {
            return _this.updateInput(input);
          });
        };
      })(this));
      return $(document).on('keydown', '.signup-form .username-field', (function(_this) {
        return function(e) {
          var input;
          input = $(e.currentTarget);
          return timeoutSet(15, function() {
            return _this.updateInput(input);
          });
        };
      })(this));
    };

    GyroscopeSignup.prototype.bindEmailCheck = function() {
      $(document).on('keypress', '.signup-form .email-field', (function(_this) {
        return function(e) {
          var input;
          input = $(e.currentTarget);
          return timeoutSet(10, function() {
            return _this.updateEmailInput(input);
          });
        };
      })(this));
      return $(document).on('keydown', '.signup-form .email-field', (function(_this) {
        return function(e) {
          var input;
          input = $(e.currentTarget);
          return timeoutSet(15, function() {
            return _this.updateEmailInput(input);
          });
        };
      })(this));
    };

    GyroscopeSignup.prototype.bindDateConverter = function() {
      $(document).on('keypress', '.signup-form .visible-birthday-picker', (function(_this) {
        return function(e) {
          var input;
          input = $(e.currentTarget);
          return timeoutSet(10, function() {
            return _this.updateBirthdate(input);
          });
        };
      })(this));
      return $(document).on('keydown', '.signup-form .visible-birthday-picker', (function(_this) {
        return function(e) {
          var input;
          input = $(e.currentTarget);
          return timeoutSet(15, function() {
            return _this.updateBirthdate(input);
          });
        };
      })(this));
    };

    GyroscopeSignup.prototype.updateBirthdate = function(el) {
      var actual, value;
      value = el.val();
      actual = $('.signup-form .actual-birthday-data');
      if (!value || value.length !== 10) {
        return actual.val('');
      } else {
        console.log('set to', this.cleanedDateValue(value));
        return actual.val(this.cleanedDateValue(value));
      }
    };

    GyroscopeSignup.prototype.cleanedDateValue = function(date) {
      var day, month, year;
      year = date.slice(0, 4);
      month = date.slice(5, 7);
      day = date.slice(8, 10);
      return month + '/' + day + '/' + year;
    };

    GyroscopeSignup.prototype.updateInputDisplay = function(input, username, classes) {
      return this.username_settings.removeClass('empty short same available unavailable').addClass(classes);
    };

    GyroscopeSignup.prototype.updateInput = function(input) {
      var new_username;
      if (this.last_username === input.val()) {
        return;
      }
      new_username = input.val().replace(/[^a-z0-9\_\-]/gi, '');
      this.last_username = new_username;
      input.val(new_username);
      if (new_username === '') {
        this.validUsername = false;
        return this.updateInputDisplay(input, new_username, 'empty');
      } else if (new_username.length < 2) {
        this.validUsername = false;
        return this.updateInputDisplay(input, new_username, 'short');
      }
      if (this.usernameCheck) {
        this.usernameCheck.abort();
      }
      return this.usernameCheck = $.ajax({
        method: 'get',
        dataType: 'json',
        data: {
          username: new_username
        },
        url: '/api/account/username/check/'
      }).done((function(_this) {
        return function(data) {
          if (data.taken) {
            _this.updateInputDisplay(input, new_username, 'unavailable');
            return _this.validUsername = false;
          } else {
            _this.updateInputDisplay(input, new_username, 'available');
            return _this.validUsername = true;
          }
        };
      })(this));
    };

    GyroscopeSignup.prototype.updateEmailInputDisplay = function(input, username, classes) {
      return this.email_settings.removeClass('empty short same available unavailable').addClass(classes);
    };

    GyroscopeSignup.prototype.updateEmailInput = function(input) {
      var new_email;
      if (this.last_email === input.val()) {
        return;
      }
      new_email = input.val();
      this.last_email = new_email;
      input.val(new_email);
      if (new_email === '') {
        this.validEmail = false;
        return this.updateEmailInputDisplay(input, new_email, 'empty');
      } else if (new_email.length < 5 || new_email.indexOf('@') === -1 || new_email.indexOf('.') === -1) {
        this.validEmail = false;
        return this.updateEmailInputDisplay(input, new_email, 'short');
      }
      if (this.emailCheck) {
        this.emailCheck.abort();
      }
      return this.emailCheck = $.ajax({
        method: 'get',
        dataType: 'json',
        url: '/api/account/username/check/?email=' + encodeURIComponent(new_email)
      }).done((function(_this) {
        return function(data) {
          if (data.taken) {
            _this.updateEmailInputDisplay(input, new_email, 'unavailable');
            return _this.validEmail = false;
          } else {
            _this.updateEmailInputDisplay(input, new_email, 'available');
            return _this.validEmail = true;
          }
        };
      })(this));
    };

    return GyroscopeSignup;

  })();

  window.GyroscopeSubscribe = (function() {
    function GyroscopeSubscribe() {
      this.bindForm();
    }

    GyroscopeSubscribe.prototype.init = function() {
      return $('#fieldEmail').focus();
    };

    GyroscopeSubscribe.prototype.formSubmitted = function() {
      $('body').addClass('submitted');
      return $('#fieldEmail').blur().prop('disabled', true);
    };

    GyroscopeSubscribe.prototype.bindForm = function() {
      return $(document).on('submit', '.email-form form', (function(_this) {
        return function(e) {
          var form;
          e.preventDefault();
          form = $(e.currentTarget);
          return $.ajax({
            dataType: 'jsonp',
            url: form.attr('action'),
            data: form.serialize()
          }).done(function(data) {
            return _this.formSubmitted();
          });
        };
      })(this));
    };

    return GyroscopeSubscribe;

  })();

}).call(this);
