// Generated by CoffeeScript 1.10.0
(function() {
  window.GyroscopeAnnual = (function() {
    function GyroscopeAnnual() {
      L.mapbox.accessToken = 'pk.eyJ1IjoiZ3lyb3Njb3BlIiwiYSI6ImNQb0ZFQXMifQ.02b2nGQcu4-DYKSyYsenHg';
    }

    GyroscopeAnnual.prototype.init = function(section, page) {
      return timeoutSet(980, (function(_this) {
        return function() {
          return _this.spinLogo();
        };
      })(this));
    };

    GyroscopeAnnual.prototype.spinLogo = function() {
      return $('#page .spinning.logo').removeClass('stopped').addClass('started');
    };

    return GyroscopeAnnual;

  })();

  window.GyroscopeReports = (function() {
    function GyroscopeReports() {
      this.annual = new GyroscopeAnnual();
      this.report = new GyroscopeReport();
      this.sleep = new GyroscopeSleepReport();
      this.mindmap = new GyroscopeMindmapReport();
      this.weight = new GyroscopeWeightReport();
      this.cacheLoaded = false;
    }

    GyroscopeReports.prototype.init = function(section, page) {
      if (section === 'year') {
        this.annual.init(section, page);
        return this.buildSections();
      } else if (section === 'overview') {
        $('#page').scrollTop(0);
        return timeoutSet(1800, (function(_this) {
          return function() {
            return _this.buildSections();
          };
        })(this));
      } else if (section === 'mindmap') {
        return this.mindmap.init(section, page);
      } else if (section === 'sleep') {
        return this.sleep.init(section, page);
      } else if (section === 'fitness') {
        return this.weight.init(section, page);
      } else if (page === 'report') {
        this.report.init(section, page);
        return timeoutSet(900, (function(_this) {
          return function() {
            return _this.buildSections();
          };
        })(this));
      }
    };

    GyroscopeReports.prototype.markSectionsViewed = function() {
      var nav;
      nav = $('#page .sections-nav');
      return $('.report-section', nav).each(function(n, el) {
        var key, section;
        section = $(el);
        key = section.attr('data-key');
        if (key) {
          if (localStorage.getItem(key)) {
            return section.addClass('viewed');
          }
        }
      });
    };

    GyroscopeReports.prototype.buildSections = function() {
      var nav, url;
      nav = $('#page .report-sections.empty');
      url = nav.attr('data-url');
      return this.hydrateNav(nav, url);
    };

    GyroscopeReports.prototype.hydrateNav = function(nav, url) {
      var cachedNav, cachedNavTimestamp, nav_TTL, now;
      console.log('Loading nav', 'from', url);
      if (localStorage) {
        cachedNav = localStorage.getItem(url + 'source');
        cachedNavTimestamp = new Date(localStorage.getItem(url + '--timestamp'));
      } else {
        cachedNav = false;
      }
      now = new Date();
      nav_TTL = 60;
      if (cachedNav && cachedNavTimestamp && (now - cachedNavTimestamp < 60 * nav_TTL * 1000)) {
        this.applyNav(nav, cachedNav);
        return;
      }
      return this.fetchFromUrl(nav, url);
    };

    GyroscopeReports.prototype.fetchFromUrl = function(destination, url) {
      return $.ajax({
        url: url,
        method: 'GET',
        contentType: 'html',
        success: (function(_this) {
          return function(data) {
            _this.applyNav(destination, data);
            if (data && localStorage && data.indexOf('upgrade-link') === -1) {
              localStorage.setItem(url + 'source', data);
              return localStorage.setItem(url + '--timestamp', new Date());
            }
          };
        })(this)
      });
    };

    GyroscopeReports.prototype.applyNav = function(destination, contents) {
      destination.find('.real-nav').html(contents);
      destination.addClass('showing');
      timeoutSet(640, function() {
        return destination.removeClass('empty');
      });
      this.markSectionsViewed();
      return this.revealCascade();
    };

    GyroscopeReports.prototype.revealCascade = function() {
      return $('#page .sections-nav li').each(function(n, el) {
        var button, delay;
        delay = 20 + (144 * n);
        button = $(el);
        return timeoutSet(delay, function() {
          return button.addClass('showing');
        });
      });
    };

    GyroscopeReports.prototype.spinLogo = function() {
      return $('#page .spinning.logo').removeClass('stopped').addClass('started');
    };

    return GyroscopeReports;

  })();

  window.GyroscopeMindmapReport = (function() {
    function GyroscopeMindmapReport() {
      this.bindLegend();
    }

    GyroscopeMindmapReport.prototype.init = function() {
      $('#page .spinning.stopped').removeClass('stopped');
      this.dotRevealCascade(400);
      return this.loadMoreDays();
    };

    GyroscopeMindmapReport.prototype.dotRevealCascade = function(delay, faster) {
      $('.page .days .stacked-day').not('.showing-dots').each(function(d, el) {
        var circles, day;
        day = $(el);
        timeoutSet(delay + d * (72 * (faster ? 8 : 16)), function() {
          return day.addClass('showing-dots');
        });
        circles = $('.day-dots', day);
        return $('.hour', circles).each(function(h, el) {
          var dot, fill, hour;
          hour = $(el);
          dot = $('.dot', hour);
          dot.css('transition-delay', 200 + (h * 72) + 'ms');
          fill = $('.fill', hour);
          return fill.css('transition-delay', (d * 72) + (h * 32) + 'ms');
        });
      });
      return timeoutSet(300 + 320 + (30 * 320), function() {
        return $('.page .showing-dots .day-dots .dot').attr('style', '');
      });
    };

    GyroscopeMindmapReport.prototype.bindLegend = function() {
      $(document).on('mouseenter', '.brain-legend .item', (function(_this) {
        return function(e) {
          var el, type;
          el = $(e.currentTarget);
          type = el.attr('data-type');
          return _this.startHover(type);
        };
      })(this));
      return $(document).on('mouseleave', '.brain-legend .item', (function(_this) {
        return function(e) {
          var el, type;
          el = $(e.currentTarget);
          type = el.attr('data-type');
          return _this.endHover(type);
        };
      })(this));
    };

    GyroscopeMindmapReport.prototype.startHover = function(type) {
      if (!type) {
        return;
      }
      return $('body').removeClass('hover-unproductive hover-productive hover-music hover-commit').addClass('hover-legend hover-' + type);
    };

    GyroscopeMindmapReport.prototype.endHover = function(type) {
      if (!type) {
        return;
      }
      return $('body').removeClass('hover-legend hover-unproductive hover-productive hover-music hover-commit');
    };

    GyroscopeMindmapReport.prototype.loadMoreDays = function() {
      var days, url;
      days = $('.page .more-days.dehydrated');
      url = days.attr('data-url');
      return $.ajax({
        url: url,
        method: 'GET',
        contentType: 'html',
        success: (function(_this) {
          return function(data) {
            days.html(data);
            days.removeClass('dehydrated');
            return _this.dotRevealCascade(25, true);
          };
        })(this)
      });
    };

    return GyroscopeMindmapReport;

  })();

  window.GyroscopeReport = (function() {
    function GyroscopeReport() {
      this.bindInstaload();
    }

    GyroscopeReport.prototype.init = function(section, page) {
      if ($('#page').scrollTop()) {
        $('#page').scrollTop(0);
      }
      if (section === 'digital') {
        timeoutSet(500 + 950, (function(_this) {
          return function() {
            return _this.dehydrate();
          };
        })(this));
        timeoutSet(500 + 1000, (function(_this) {
          return function() {
            return _this.dehydrate();
          };
        })(this));
        timeoutSet(500 + 1200, (function(_this) {
          return function() {
            return _this.dehydrate();
          };
        })(this));
        timeoutSet(500 + 1450, (function(_this) {
          return function() {
            return _this.dehydrate();
          };
        })(this));
      } else {
        timeoutSet(800, (function(_this) {
          return function() {
            return _this.dehydrate();
          };
        })(this));
        timeoutSet(1500, (function(_this) {
          return function() {
            return _this.dehydrate();
          };
        })(this));
        timeoutSet(9000, (function(_this) {
          return function() {
            return _this.dehydrate();
          };
        })(this));
        timeoutSet(12000, (function(_this) {
          return function() {
            return _this.dehydrate();
          };
        })(this));
      }
      if (section === 'travel') {
        this.activateHoneycomb();
        timeoutSet(3500, (function(_this) {
          return function() {
            return _this.dehydrate();
          };
        })(this));
        timeoutSet(6000 * 2, (function(_this) {
          return function() {
            return _this.dehydrate();
          };
        })(this));
        timeoutSet(6000 * 3, (function(_this) {
          return function() {
            return _this.dehydrate();
          };
        })(this));
        timeoutSet(6000 * 4, (function(_this) {
          return function() {
            return _this.dehydrate();
          };
        })(this));
      }
      if (section === 'gyms') {
        $('#page .graphic .iframe.dehydrated').each((function(_this) {
          return function(n, el) {
            var delay;
            delay = 2500 + (160 * n);
            return timeoutSet(delay, function() {
              return _this.dehydrate();
            });
          };
        })(this));
      }
      if (section === 'places') {
        this.dehydrateCategories();
      }
      this.dehydrateRenders();
      if (($('#page .twitter-button').length)) {
        timeoutSet(2000, (function(_this) {
          return function() {
            return _this.loadTwitterJs();
          };
        })(this));
      }
      if (($('#page .facebook-button').length)) {
        return timeoutSet(5000, (function(_this) {
          return function() {
            return _this.loadFacebookJs();
          };
        })(this));
      }
    };

    GyroscopeReport.prototype.dehydrate = function(limit) {
      limit = limit || 1;
      return $('#page .iframe.dehydrated').each((function(_this) {
        return function(n, el) {
          var frame;
          frame = $(el);
          if (n < limit) {
            return _this.hydrate(frame);
          }
        };
      })(this));
    };

    GyroscopeReport.prototype.bindInstaload = function() {
      return $(document).on('click', '.instaload', (function(_this) {
        return function(e) {
          var button, frame, parent;
          button = $(e.currentTarget);
          parent = button.parents('.graphic');
          frame = $('.iframe.dehydrated', parent);
          console.log(button, parent, frame);
          if (frame.length) {
            console.log('trying to hydrate');
            return _this.hydrate(frame);
          }
        };
      })(this));
    };

    GyroscopeReport.prototype.hydrate = function(frame) {
      var source;
      source = frame.attr('data-src');
      if ($('html').hasClass('mobile')) {
        source = source.replace('&copy=notright', '&copy=bottom');
        source = source.replace('&copy=left', '&copy=bottom');
        source = source.replace('&copy=bottomleft', '&copy=bottom');
        if (frame.attr('data-padding-mobile')) {
          source += '&padding=' + frame.attr('data-padding-mobile');
        }
      } else if (frame.attr('data-padding')) {
        if (frame.attr('data-padding')) {
          source += '&padding=' + frame.attr('data-padding');
        }
      }
      frame.attr('src', source);
      frame.removeClass('dehydrated');
      return timeoutSet(1200, function() {
        return frame.addClass('hydrated');
      });
    };

    GyroscopeReport.prototype.activateHoneycomb = function() {
      var honeycomb;
      honeycomb = $('#page .month-header .honeycomb');
      $('.jitter', honeycomb).each(function(n, el) {
        return $(el).attr('style', '-webkit-animation-delay:' + parseInt(Math.random() * 4000) + 'ms;');
      });
      return $('body').addClass('honeycomb-activated');
    };

    GyroscopeReport.prototype.dehydrateCategories = function() {
      return $('#page .photo.dehydrated').each((function(_this) {
        return function(n, el) {
          var delay, photo;
          delay = 2400 + n * 90;
          photo = $(el);
          return timeoutSet(delay, function() {
            var styles;
            styles = photo.attr('data-style');
            photo.attr('style', styles);
            return photo.removeClass('dehydrated');
          });
        };
      })(this));
    };

    GyroscopeReport.prototype.dehydrateRenders = function() {
      return $('#page .render.dehydrated').each((function(_this) {
        return function(n, el) {
          var delay, photo;
          delay = 2400 + n * 100;
          photo = $(el);
          return timeoutSet(delay, function() {
            var src;
            src = photo.attr('data-src');
            photo.attr('src', src);
            return photo.removeClass('dehydrated');
          });
        };
      })(this));
    };

    GyroscopeReport.prototype.loadFacebookJs = function() {
      var el;
      if ($('#fb-root').length && FB) {
        return FB.XFBML.parse();
      } else {
        el = '<div id="fb-root"></div>\n<script id="fb-script">(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&appId=309431422557180&version=v2.4";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, \'script\', \'facebook-jssdk\'));</script>';
        return $('body').append(el);
      }
    };

    GyroscopeReport.prototype.loadTwitterJs = function() {
      return $('#page').append('<script async src="//platform.twitter.com/widgets.js" charset="utf-8" />');
    };

    return GyroscopeReport;

  })();

  window.GyroscopeSleepReport = (function() {
    function GyroscopeSleepReport() {
      this.bindEditing();
    }

    GyroscopeSleepReport.prototype.init = function() {
      this.dayRevealCascade();
      return this.buildSleepLine($('#page #sleepline'), $('#page .sleep-spread.for-duration .day'));
    };

    GyroscopeSleepReport.prototype.dayRevealCascade = function() {
      return $('.page .days .stacked-day').each((function(_this) {
        return function(d, el) {
          var day;
          day = $(el);
          return timeoutSet(1800 + d * 920, function() {
            day.addClass('showing-dots');
            _this.loadBrainLine($('.brainline', day));
            return _this.loadHeartLine($('.heartline', day));
          });
        };
      })(this));
    };

    GyroscopeSleepReport.prototype.loadBrainLine = function(graph) {
      var day, json_url;
      if (graph.hasClass('drawn')) {
        return;
      }
      day = graph.parents('.day');
      if (day.css('display') === 'none') {
        return;
      }
      json_url = graph.attr('data-url');
      if (!json_url) {
        return;
      }
      return this.buildBrainGraph(graph, json_url);
    };

    GyroscopeSleepReport.prototype.buildBrainGraph = function(container, json_url) {
      return d3.json(json_url, (function(_this) {
        return function(error, response) {
          if (error) {
            console.warn(error);
          }
          if (response.items.length) {
            if (response.totals.total_seconds > 600) {
              _this.graphBrain(container, response.items);
              return _this.addBrainDetails(container, response.totals);
            } else {

            }
          } else {
            return console.log('no items for day');
          }
        };
      })(this));
    };

    GyroscopeSleepReport.prototype.addBrainDetails = function(container, totals) {
      var details, info;
      return;
      info = container.parents('.day').find('.day-info').first();
      if (info.hasClass('written')) {
        return;
      }
      details = info.find('.details').first();
      if (totals.total_seconds > 600) {
        details.append('<p class="online time">' + parseInt(totals.total_seconds / 3600) + ' hrs online</p>');
        if (totals.productive_seconds > 600) {
          details.append('<p class="productive time">' + totals.ratio + '% productive</p>');
        }
      }
      return timeoutSet(50, function() {
        return info.addClass('written');
      });
    };

    GyroscopeSleepReport.prototype.graphBrain = function(container, items, startCrop, endCrop) {
      var area, bottomArea, commit_points, dark, downLine, end, height, hour, i, id, len, line, max_commits, max_music, max_seconds, midpoint, min_commits, min_music, min_seconds, music_points, productiveFill, productive_points, solid, start, svg, total_points, unproductiveFill, unproductive_points, width, x, y_commits, y_music, y_prod, y_total, y_unprod;
      solid = container.hasClass('solid');
      dark = container.hasClass('dark');
      width = container.width();
      height = container.height();
      if (solid) {
        midpoint = height * 0.55;
      } else {
        midpoint = height * 0.9;
      }
      max_seconds = 60 * 60 * 1.2;
      if (solid) {
        max_seconds = 60 * 60 * 2.4;
      }
      min_seconds = 0;
      max_music = 20;
      min_music = 0;
      max_commits = 10;
      min_commits = 0;
      start = items[0].start;
      if (startCrop) {
        start = startCrop;
      }
      if (endCrop) {
        end = endCrop;
      } else {
        end = items[items.length - 1].start;
      }
      id = container.attr('id');
      svg = d3.select('#' + id).select('svg');
      line = d3.svg.line().interpolate('basis').x(function(d) {
        return d.x;
      }).y(function(d) {
        return d.y;
      });
      downLine = d3.svg.line().interpolate('basis').x(function(d) {
        return d.x;
      }).y(function(d) {
        return midpoint - (d.y - midpoint);
      });
      area = d3.svg.area().interpolate('basis').x(function(d) {
        return d.x;
      }).y0(midpoint).y1(function(d) {
        return d.y;
      });
      bottomArea = d3.svg.area().interpolate('basis').x(function(d) {
        return d.x;
      }).y1(midpoint).y0(function(d) {
        return midpoint - (d.y - midpoint);
      });
      productiveFill = 'productiveFill' + id;
      unproductiveFill = 'unproductiveFill' + id;
      svg.append('linearGradient').attr('id', productiveFill).attr('gradientUnits', 'userSpaceOnUse').attr('x1', 0).attr('y1', height).attr('x2', 0).attr('y2', 0).selectAll('stop').data([
        {
          offset: '50%',
          color: dark ? '#1d9e32' : '#16b930'
        }, {
          offset: '80%',
          color: dark ? '#ddff3d' : '#c0d81a'
        }
      ]).enter().append('stop').attr('offset', function(d) {
        return d.offset;
      }).attr('stop-color', function(d) {
        return d.color;
      });
      svg.append('linearGradient').attr('id', 'productiveStroke').attr('gradientUnits', 'userSpaceOnUse').attr('x1', 0).attr('y1', height).attr('x2', 0).attr('y2', 0).selectAll('stop').data([
        {
          offset: '14%',
          color: 'rgba(0,0,0,0.0)'
        }, {
          offset: '20%',
          color: 'rgba(50,110,90,0.3)'
        }, {
          offset: '50%',
          color: 'rgba(60,180,55,0.5)'
        }
      ]).enter().append('stop').attr('offset', function(d) {
        return d.offset;
      }).attr('stop-color', function(d) {
        return d.color;
      });
      svg.append('linearGradient').attr('id', 'unproductiveStroke').attr('gradientUnits', 'userSpaceOnUse').attr('x1', 0).attr('y1', height).attr('x2', 0).attr('y2', 0).selectAll('stop').data([
        {
          offset: '14%',
          color: 'rgba(0,0,0,0.0)'
        }, {
          offset: '18%',
          color: 'rgba(50,110,90,0.5)'
        }, {
          offset: '45%',
          color: 'rgba(210,190,40,0.9)'
        }
      ]).enter().append('stop').attr('offset', function(d) {
        return d.offset;
      }).attr('stop-color', function(d) {
        return d.color;
      });
      svg.append('linearGradient').attr('id', unproductiveFill).attr('gradientUnits', 'userSpaceOnUse').attr('x1', 0).attr('y1', height).attr('x2', 0).attr('y2', 0).selectAll('stop').data([
        {
          offset: '25%',
          color: dark ? '#ba1a1a' : '#d12c23'
        }, {
          offset: '50%',
          color: dark ? '#ffa811' : '#f86639'
        }
      ]).enter().append('stop').attr('offset', function(d) {
        return d.offset;
      }).attr('stop-color', function(d) {
        return d.color;
      });
      productive_points = [];
      total_points = [];
      unproductive_points = [];
      commit_points = [];
      music_points = [];
      for (i = 0, len = items.length; i < len; i++) {
        hour = items[i];
        x = (hour.start - start) / (end - start);
        y_prod = (max_seconds - Math.min(hour.productive_seconds, max_seconds)) / (max_seconds - min_seconds);
        y_unprod = (max_seconds - hour.unproductive_seconds) / (max_seconds - min_seconds);
        y_total = (max_seconds - Math.min(hour.total_seconds, max_seconds)) / (max_seconds - min_seconds);
        y_music = (max_music - hour.total_songs) / (max_music - min_music);
        y_commits = (max_commits - hour.total_commits) / (max_commits - min_commits);
        productive_points.push({
          "x": x * width,
          "y": y_prod * height - (height - midpoint)
        });
        unproductive_points.push({
          "x": x * width,
          "y": y_unprod * height - (height - midpoint)
        });
        total_points.push({
          "x": x * width,
          "y": y_total * height - (height - midpoint)
        });
      }
      if (total_points.length) {
        svg.append('path').attr('d', line(productive_points)).attr('class', 'pathline productive');
        svg.append('path').attr('d', line(unproductive_points)).attr('class', 'pathline unproductive');
      }
      return container.addClass('loaded-brain');
    };

    GyroscopeSleepReport.prototype.loadHeartLine = function(graph) {
      var day, json_url;
      if (graph.hasClass('drawn')) {
        return;
      }
      day = graph.parents('.day');
      if (day.css('display') === 'none') {
        return;
      }
      json_url = graph.attr('data-url');
      if (!json_url) {
        return;
      }
      return this.buildHeartGraph(graph, json_url);
    };

    GyroscopeSleepReport.prototype.buildHeartGraph = function(graph, json_url) {
      return d3.json(json_url, (function(_this) {
        return function(error, response) {
          if (error) {
            console.warn(error);
          }
          if (response.heartrates && response.heartrates.length) {
            return _this.graphHeartrates(graph, response.heartrates, response.start, response.end, response.chunked, response.max, response.min);
          } else {
            return console.log('no items for day');
          }
        };
      })(this));
    };

    GyroscopeSleepReport.prototype.graphHeartrates = function(container, items, start, end, chunked, max, min) {
      var avg, chunk, coloring, count, dark, delay, draw, duration, el, even, first, gaps, gradId, heartrates, height, hr, hrg, i, id, j, k, l, latest_gapline, len, len1, len2, len3, len4, len5, len6, length, line, m, newHr, o, p, path, points, q, ref, ref1, sport, sum, svg, width, x, y;
      height = container.height();
      width = container.width();
      dark = true;
      min = 0;
      max = 240;
      line = d3.svg.line().interpolate('basis').x(function(d) {
        return d.x;
      }).y(function(d) {
        return d.y;
      });
      id = container.attr('id');
      svg = d3.select('#page #' + id).select('svg');
      gaps = [];
      first = true;
      even = true;
      sport = false;
      if (chunked) {
        for (i = 0, len = items.length; i < len; i++) {
          chunk = items[i];
          points = [];
          for (j = 0, len1 = chunk.length; j < len1; j++) {
            heartrates = chunk[j];
            x = (heartrates.time - start) / (end - start);
            count = heartrates.values.length;
            if (count) {
              sum = 0;
              ref = heartrates.values;
              for (k = 0, len2 = ref.length; k < len2; k++) {
                hr = ref[k];
                sum += parseInt(hr);
              }
              avg = parseInt(sum / count);
              y = (max - avg) / (max - min);
            }
            if (x && y) {
              points.push({
                "x": x * width,
                "y": y * height
              });
            }
            if (first && x > (sport ? 0.2 : 0.03)) {
              newHr = {
                time: start,
                values: [sport ? 120 : 60]
              };
              gaps.push(newHr);
              first = false;
            }
          }
          if (!first) {
            gaps.push(chunk[0]);
          }
          gaps.push(chunk[chunk.length - 1]);
          first = false;
          svg.append('path').attr('d', line(points)).attr('class', 'pathline');
        }
      }
      even = false;
      latest_gapline = [];
      for (l = 0, len3 = gaps.length; l < len3; l++) {
        hrg = gaps[l];
        if (hrg && hrg.time) {
          x = (hrg.time - start) / (end - start);
          count = hrg.values.length;
          if (count) {
            sum = 0;
            ref1 = hrg.values;
            for (m = 0, len4 = ref1.length; m < len4; m++) {
              hr = ref1[m];
              sum += parseInt(hr);
            }
            avg = parseInt(sum / count);
            y = (max - avg) / (max - min);
          }
          if (y) {
            latest_gapline.push({
              x: x * width,
              y: y * height
            });
            if (even) {
              svg.append('path').attr('d', line(latest_gapline)).attr('class', 'gapline');
              latest_gapline = [];
              even = false;
            } else {
              even = true;
            }
          }
        }
      }
      gradId = 'heartLine' + id;
      coloring = svg.append('linearGradient').attr('id', gradId).attr('gradientUnits', 'userSpaceOnUse').attr('x1', 0).attr('y1', height).attr('x2', 0).attr('y2', 0);
      coloring.selectAll('stop').data([
        {
          offset: '18%',
          color: '#25822c'
        }, {
          offset: '28%',
          color: 'rgba(65,130,140,0.6)'
        }, {
          offset: '44%',
          color: 'rgba(50,100,125,0.7)'
        }, {
          offset: '56%',
          color: 'rgba(255,200,53,0.8)'
        }, {
          offset: '80%',
          color: 'rgba(255,53,90,0.7)'
        }
      ]).enter().append('stop').attr('offset', function(d) {
        return d.offset;
      }).attr('stop-color', function(d) {
        return d.color;
      });
      if (!($('#device-info')).hasClass('browser-chrome')) {
        draw = $('path', container);
        delay = 50;
        for (p = o = 0, len5 = draw.length; o < len5; p = ++o) {
          path = draw[p];
          length = parseInt(path.getTotalLength());
          duration = Math.max(parseInt(4.4 * length), 150);
          el = $(path).css({
            'stroke': 'url(#' + gradId + ')',
            'transition-duration': duration + 'ms',
            'transition-delay': delay + 'ms',
            'stroke-dasharray': length + 10,
            'stroke-dashoffset': length + 10
          });
          delay = delay + duration;
        }
      } else {
        draw = $('path', container);
        delay = 50;
        for (p = q = 0, len6 = draw.length; q < len6; p = ++q) {
          path = draw[p];
          el = $(path).css({
            'stroke': 'url(#' + gradId + ')'
          });
        }
        console.log('chrome gets simpler heartdraw..');
      }
      return timeoutSet(50, function() {
        return container.addClass('drawn');
      });
    };

    GyroscopeSleepReport.prototype.buildSleepLine = function(container, bars, max) {
      var bar, count, counter, days_in_month, delay, draw, duration, el, fill, graph, height, i, j, len, len1, length, line, p, path, points, rolling, rolling_average_duration, smooth_count, svg, total_days, width, x, y;
      if (max == null) {
        max = 46800;
      }
      graph = $('.sleepline', container);
      width = graph.width();
      height = graph.height();
      days_in_month = bars.length;
      svg = d3.select('#page #sleepline').select('svg');
      line = d3.svg.line().interpolate('bundle').tension(0.9).x(function(d) {
        return d.x;
      }).y(function(d) {
        return d.y;
      });
      points = [];
      total_days = bars.length;
      rolling = [];
      rolling_average_duration = parseInt(bars.length * 0.1);
      for (i = 0, len = bars.length; i < len; i++) {
        bar = bars[i];
        fill = $('.sleep-fill', bar);
        count = Math.min(44000, fill.attr('data-duration'));
        if (count) {
          counter = parseInt(fill.attr('data-counter'));
          rolling.push(count);
          smooth_count = parseInt(this.rollingAverage(rolling, rolling_average_duration));
          x = (counter - 0.5) / (total_days - 0.25);
          y = 1 - (smooth_count / max);
          if (x && y) {
            points.push({
              "x": x * width,
              "y": y * height
            });
          }
        }
      }
      svg.append('linearGradient').attr('id', 'steplinecolor').attr('gradientUnits', 'userSpaceOnUse').attr('x1', 0).attr('y1', height).attr('x2', 0).attr('y2', 0).selectAll('stop').data([
        {
          offset: '5%',
          color: '#c63a4a'
        }, {
          offset: '33%',
          color: '#d5d339'
        }, {
          offset: '55%',
          color: '#1cab30'
        }, {
          offset: '80%',
          color: '#23c7e7'
        }
      ]).enter().append('stop').attr('offset', function(d) {
        return d.offset;
      }).attr('stop-color', function(d) {
        return d.color;
      });
      svg.append('path').attr('d', line(points)).attr('class', 'sleep pathline new');
      delay = 50;
      draw = $('.new.pathline', graph);
      for (p = j = 0, len1 = draw.length; j < len1; p = ++j) {
        path = draw[p];
        length = parseInt(path.getTotalLength());
        duration = Math.max(parseInt(3.2 * length), 100);
        el = $(path).css({
          'stroke': 'url(#steplinecolor)'
        });
        delay = delay + duration;
      }
      return timeoutSet(100, (function(_this) {
        return function() {
          return container.addClass('showing');
        };
      })(this));
    };

    GyroscopeSleepReport.prototype.rollingAverage = function(items, count) {
      var i, len, top, total;
      top = items.slice(-1 * count, items.length);
      total = 0;
      for (i = 0, len = top.length; i < len; i++) {
        count = top[i];
        total += parseInt(count);
      }
      if (top.length) {
        return total / top.length;
      }
      return 0;
    };

    GyroscopeSleepReport.prototype.bindEditing = function() {
      $(document).on('click', '.save-predicted-sleep', (function(_this) {
        return function(e) {
          var button, end, start, userId;
          e.preventDefault();
          button = $(e.currentTarget);
          userId = button.attr('data-user');
          start = button.attr('data-start');
          end = button.attr('data-end');
          console.log('create sleep', userId, start, end);
          return $.ajax({
            method: 'post',
            dataType: 'json',
            url: button.attr('data-href'),
            data: {
              user_id: userId,
              start_time: start,
              end_time: end
            },
            success: function(data) {
              console.log(data);
              if (data.response === 'ok') {
                return console.log('SUCCESSFUL SLEEP SAVING');
              }
            },
            error: function(data) {
              return console.log("Error saving sleep", userId, start, end);
            }
          });
        };
      })(this));
      return $(document).on('click', '.delete-saved-sleep', (function(_this) {
        return function(e) {
          var bubble, button;
          e.preventDefault();
          button = $(e.currentTarget);
          console.log('DELETE sleep');
          $.ajax({
            method: 'post',
            dataType: 'json',
            url: button.attr('data-href'),
            success: function(data) {
              console.log(data);
              if (data.response === 'ok') {
                return console.log('DELETED THE SLEEP');
              }
            },
            error: function(data) {
              return console.log("Error deleting sleep");
            }
          });
          bubble = button.parents('.sleep.bubble');
          if (bubble.length) {
            return bubble.remove();
          }
        };
      })(this));
    };

    return GyroscopeSleepReport;

  })();

  window.GyroscopeWeightReport = (function() {
    function GyroscopeWeightReport() {
      this.bindExpander();
    }

    GyroscopeWeightReport.prototype.init = function() {
      var bars, container, max;
      this.dehydrate(2);
      container = $('#page #stepsline');
      max = container.attr('data-max');
      bars = $('#page .steps-spread .day');
      this.buildStepsLine(container, bars, max);
      return this.buildSleepLine($('#page #sleepline'), $('#page .sleep-spread .day'));
    };

    GyroscopeWeightReport.prototype.dehydrate = function(limit) {
      limit = limit || 1;
      return $('#page .iframe.dehydrated').each((function(_this) {
        return function(n, el) {
          var frame;
          frame = $(el);
          if (n < limit) {
            return _this.hydrate(frame);
          }
        };
      })(this));
    };

    GyroscopeWeightReport.prototype.hydrate = function(frame) {
      var source;
      source = frame.attr('data-src');
      frame.attr('src', source);
      frame.removeClass('dehydrated');
      return timeoutSet(1200, function() {
        return frame.addClass('hydrated');
      });
    };

    GyroscopeWeightReport.prototype.buildStepsLine = function(container, bars, max) {
      var bar, count, counter, days_in_month, delay, draw, duration, el, fill, graph, height, i, j, len, len1, length, line, p, path, points, rolling, rolling_average_duration, smooth_count, svg, total_days, width, x, y;
      if (max == null) {
        max = 19000;
      }
      graph = $('.stepsline', container);
      width = graph.width();
      height = graph.height();
      days_in_month = bars.length;
      svg = d3.select('#page #stepsline').select('svg');
      line = d3.svg.line().interpolate('bundle').tension(0.9).x(function(d) {
        return d.x;
      }).y(function(d) {
        return d.y;
      });
      points = [];
      total_days = bars.length;
      rolling = [];
      rolling_average_duration = parseInt(bars.length * 0.08);
      for (i = 0, len = bars.length; i < len; i++) {
        bar = bars[i];
        fill = $('.steps-fill', bar);
        count = fill.attr('data-steps');
        if (count) {
          counter = fill.attr('data-counter');
          rolling.push(count);
          smooth_count = this.rollingAverage(rolling, rolling_average_duration);
          x = (counter - 0.5) / (total_days - 0.25);
          y = 1 - (smooth_count / max);
          if (x && y) {
            points.push({
              "x": x * width,
              "y": y * height
            });
          }
        }
      }
      svg.append('linearGradient').attr('id', 'steplinecolor').attr('gradientUnits', 'userSpaceOnUse').attr('x1', 0).attr('y1', height).attr('x2', 0).attr('y2', 0).selectAll('stop').data([
        {
          offset: '5%',
          color: '#c63a4a'
        }, {
          offset: '33%',
          color: '#d5d339'
        }, {
          offset: '55%',
          color: '#1cab30'
        }, {
          offset: '80%',
          color: '#23c7e7'
        }
      ]).enter().append('stop').attr('offset', function(d) {
        return d.offset;
      }).attr('stop-color', function(d) {
        return d.color;
      });
      svg.append('path').attr('d', line(points)).attr('class', 'steps pathline new');
      delay = 50;
      draw = $('.new.pathline', graph);
      for (p = j = 0, len1 = draw.length; j < len1; p = ++j) {
        path = draw[p];
        length = parseInt(path.getTotalLength());
        duration = Math.max(parseInt(3.2 * length), 100);
        el = $(path).css({
          'stroke': 'url(#steplinecolor)'
        });
        delay = delay + duration;
      }
      return timeoutSet(100, (function(_this) {
        return function() {
          return container.addClass('showing');
        };
      })(this));
    };

    GyroscopeWeightReport.prototype.buildSleepLine = function(container, bars, max) {
      var bar, count, counter, days_in_month, delay, draw, duration, el, fill, graph, height, i, j, len, len1, length, line, p, path, points, rolling, rolling_average_duration, smooth_count, svg, total_days, width, x, y;
      if (max == null) {
        max = 50000;
      }
      graph = $('.sleepline', container);
      width = graph.width();
      height = graph.height();
      days_in_month = bars.length;
      svg = d3.select('#page #sleepline').select('svg');
      line = d3.svg.line().interpolate('bundle').tension(0.9).x(function(d) {
        return d.x;
      }).y(function(d) {
        return d.y;
      });
      points = [];
      total_days = bars.length;
      rolling = [];
      rolling_average_duration = parseInt(bars.length * 0.1);
      for (i = 0, len = bars.length; i < len; i++) {
        bar = bars[i];
        fill = $('.sleep-fill', bar);
        count = Math.min(44000, fill.attr('data-duration'));
        if (count) {
          counter = fill.attr('data-counter');
          rolling.push(count);
          smooth_count = this.rollingAverage(rolling, rolling_average_duration);
          x = (counter - 0.5) / (total_days - 0.25);
          y = 1 - (smooth_count / max);
          if (x && y) {
            points.push({
              "x": x * width,
              "y": y * height
            });
          }
        }
      }
      svg.append('linearGradient').attr('id', 'steplinecolor').attr('gradientUnits', 'userSpaceOnUse').attr('x1', 0).attr('y1', height).attr('x2', 0).attr('y2', 0).selectAll('stop').data([
        {
          offset: '5%',
          color: '#c63a4a'
        }, {
          offset: '33%',
          color: '#d5d339'
        }, {
          offset: '55%',
          color: '#1cab30'
        }, {
          offset: '80%',
          color: '#23c7e7'
        }
      ]).enter().append('stop').attr('offset', function(d) {
        return d.offset;
      }).attr('stop-color', function(d) {
        return d.color;
      });
      svg.append('path').attr('d', line(points)).attr('class', 'sleep pathline new');
      delay = 50;
      draw = $('.new.pathline', graph);
      for (p = j = 0, len1 = draw.length; j < len1; p = ++j) {
        path = draw[p];
        length = parseInt(path.getTotalLength());
        duration = Math.max(parseInt(3.2 * length), 100);
        el = $(path).css({
          'stroke': 'url(#steplinecolor)'
        });
        delay = delay + duration;
      }
      return timeoutSet(100, (function(_this) {
        return function() {
          return container.addClass('showing');
        };
      })(this));
    };

    GyroscopeWeightReport.prototype.rollingAverage = function(items, count) {
      var i, len, top, total;
      top = items.slice(-1 * count, items.length);
      console.log(top);
      total = 0;
      for (i = 0, len = top.length; i < len; i++) {
        count = top[i];
        total += parseInt(count);
      }
      if (top.length) {
        console.log(total / top.length);
        return total / top.length;
      }
      return 0;
    };

    GyroscopeWeightReport.prototype.bindExpander = function() {
      return $(document).on('click', '.report-actions .toggle', (function(_this) {
        return function(e) {
          return $('body').toggleClass('expanded');
        };
      })(this));
    };

    return GyroscopeWeightReport;

  })();

}).call(this);
