// Generated by CoffeeScript 1.10.0
(function() {
  window.GyroscopeAdvancedSettings = (function() {
    function GyroscopeAdvancedSettings() {
      this.bindUnitButtons();
      this.bindHidingButtons();
      this.bindEmailButtons();
    }

    GyroscopeAdvancedSettings.prototype.init = function() {};

    GyroscopeAdvancedSettings.prototype.changeHidePrefs = function(key, hideValue) {
      var data;
      data = {};
      data["hide_" + key] = hideValue;
      if (this.hidePrefs) {
        this.hidePrefs.abort();
      }
      return this.hidePrefs = $.ajax({
        method: 'post',
        dataType: 'text',
        url: '/settings/display_preferences/',
        data: data,
        success: (function(_this) {
          return function(resp) {
            if (resp === 'ok') {
              return _this.hidePrefsSuccess(key, hideValue);
            }
          };
        })(this),
        error: (function(_this) {
          return function(resp) {
            return console.log("Error saving prefs: " + resp);
          };
        })(this)
      });
    };

    GyroscopeAdvancedSettings.prototype.changeUnits = function(units) {
      if (this.unitsChange) {
        this.unitsChange.abort();
      }
      return this.unitsChange = $.ajax({
        method: 'post',
        dataType: 'text',
        url: '/settings/display_preferences/',
        data: {
          units: units
        },
        success: (function(_this) {
          return function(data) {
            if (data === 'ok') {
              return _this.unitsChangeSuccess(units);
            }
          };
        })(this),
        error: function(data) {
          return console.log("Error changing units: " + data);
        }
      });
    };

    GyroscopeAdvancedSettings.prototype.changeEmail = function(email) {
      if (this.emailChange) {
        this.emailChange.abort();
      }
      return this.emailChange = $.ajax({
        method: 'post',
        dataType: 'text',
        url: '/settings/email_preferences/',
        data: {
          send_email: email
        },
        success: (function(_this) {
          return function(data) {
            if (data === 'ok') {
              return _this.emailChangeSuccess(email);
            }
          };
        })(this),
        error: function(data) {
          return console.log("Error changing email setting");
        }
      });
    };

    GyroscopeAdvancedSettings.prototype.hidePrefsSuccess = function(key, hideValue) {
      $("#hiding-state").toggleClass("hiding-" + key, hideValue);
      return $("#hiding-state").toggleClass("showing-" + key, !hideValue);
    };

    GyroscopeAdvancedSettings.prototype.bindHidingButtons = function() {
      $(document).on('click', '.account-hide-age', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.changeHidePrefs('age', true);
        };
      })(this));
      $(document).on('click', '.account-show-age', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.changeHidePrefs('age', false);
        };
      })(this));
      $(document).on('click', '.account-hide-weight', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.changeHidePrefs('weight', true);
        };
      })(this));
      return $(document).on('click', '.account-show-weight', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.changeHidePrefs('weight', false);
        };
      })(this));
    };

    GyroscopeAdvancedSettings.prototype.unitsChangeSuccess = function(units) {
      console.log('switching', units);
      return $("#metric-state").removeClass('imperial metric canada').addClass(units);
    };

    GyroscopeAdvancedSettings.prototype.emailChangeSuccess = function(send_email) {
      var email_state;
      email_state = send_email ? 'email-on' : 'email-off';
      console.log('switching email', email_state);
      return $("#email-state").removeClass('email-on email-off').addClass(email_state);
    };

    GyroscopeAdvancedSettings.prototype.bindUnitButtons = function() {
      $(document).on('click', '.switch-to-metric', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.changeUnits('metric');
        };
      })(this));
      $(document).on('click', '.switch-to-imperial', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.changeUnits('imperial');
        };
      })(this));
      $(document).on('click', '.switch-canada-on', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.changeUnits('canada');
        };
      })(this));
      return $(document).on('click', '.switch-canada-off', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.changeUnits('metric');
        };
      })(this));
    };

    GyroscopeAdvancedSettings.prototype.bindEmailButtons = function() {
      $(document).on('click', '.switch-email-on', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.changeEmail(true);
        };
      })(this));
      return $(document).on('click', '.switch-email-off', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.changeEmail(false);
        };
      })(this));
    };

    return GyroscopeAdvancedSettings;

  })();

  window.GyroscopeAvatar = (function() {
    function GyroscopeAvatar() {}

    GyroscopeAvatar.prototype.init = function() {
      console.log('waitlist');
      this.dropzoneInitialized = false;
      $('body').addClass('photo-uploadable');
      if (!this.dropzoneInitialized) {
        this.setupDropzone();
        return this.dropzoneInitialized = true;
      }
    };

    GyroscopeAvatar.prototype.setupDropzone = function() {
      var bar, token, uploader, url;
      console.log('Initialize upload form');
      uploader = $('#page .photo.upload-area').addClass('initialized');
      if (!uploader.length) {
        return;
      }
      url = 'http://gyroscopedev.com:7000/v1/account/profile-picture/';
      url = 'https://api.gyrosco.pe/v1/account/profile-picture/';
      token = uploader.attr('data-token');
      if (!token) {
        console.log('Invalid token');
        return;
      }
      bar = $('.progress-bar .fill', uploader);
      return $('#photo-fileupload').fileupload({
        url: url,
        dataType: 'json',
        headers: {
          "X-Totem-Token-Id": token
        },
        xhrFields: {
          withCredentials: true
        },
        add: function(e, data) {
          var file, seems_valid;
          seems_valid = false;
          if (data.files) {
            file = data.files[0];
            if (file.type !== 'image/png' && file.type !== 'image/jpeg') {
              alert('Please upload a valid image file.');
              return;
            }
            data.submit();
            $('body').addClass('photo-uploading');
            return timeoutSet(20, function() {
              return bar.addClass('showing');
            });
          }
        },
        progressall: function(e, data) {
          var progress;
          progress = parseInt(data.loaded / data.total * 100, 10);
          return bar.css({
            'width': progress + '%'
          });
        },
        done: function(e, data) {
          return $('body').addClass('photo-uploaded');
        }
      });
    };

    return GyroscopeAvatar;

  })();

  window.GyroscopeAccount = (function() {
    function GyroscopeAccount() {
      this.settings = new GyroscopeSettings();
      this.advanced = new GyroscopeAdvancedSettings();
      this.dashboard = new GyroscopeDashboard(this);
      this.places = new GyroscopePlaces();
      this.themes = new GyroscopeThemes();
      this.payments = new GyroscopePayments();
      this.requests = new GyroscopeRequests();
      this.friends = new GyroscopeFriends();
      this.groups = new GyroscopeGroups();
      this.reports = new GyroscopeReports();
      this.help = new GyroscopeHelp();
      this.vault = new GyroscopeVault();
      this.store = new GyroscopeStore();
      this.goals = new GyroscopeGoals();
      this.gift = new GyroscopeGift();
      this.waitlist = new GyroscopeWaitlist();
      this.avatar = new GyroscopeAvatar();
    }

    GyroscopeAccount.prototype.init = function(section, page) {
      this.displayNotifications();
      if (section === 'settings') {
        if (page === 'advanced') {
          return this.advanced.init();
        } else if (page === 'avatar') {
          return this.avatar.init();
        } else {
          this.settings.init();
          return this.checkCurrentUser();
        }
      } else if (section === 'dashboard') {
        this.dashboard.init();
        this.checkCurrentUser();
        return this.spinLogo();
      } else if (section === 'waitlist') {
        this.dashboard.init();
        this.waitlist.init();
        this.avatar.init();
        return this.spinLogo();
      } else if (section === 'payment') {
        this.payments.init();
        return this.spinLogo();
      } else if (section === 'themes') {
        return this.themes.init();
      } else if (section === 'places') {
        return this.places.init();
      } else if (section === 'requests') {
        return this.requests.init();
      } else if (section === 'friends') {
        return this.friends.init();
      } else if (section === 'groups' || section === 'group') {
        return this.groups.init(page);
      } else if (section === 'reports') {
        return this.reports.init();
      } else if (section === 'vault') {
        return this.vault.init();
      } else if (section === 'store') {
        this.store.init(page);
        this.payments.init();
        if (page === 'gift') {
          return this.payments.setupStripeGift();
        }
      } else if (section === 'help') {
        return this.help.init();
      } else if (section === 'goals') {
        return this.goals.init();
      } else if (section === 'redeem') {
        return this.gift.init();
      }
    };

    GyroscopeAccount.prototype.spinLogo = function() {
      return timeoutSet(200, (function(_this) {
        return function() {
          return $('#page .spinning.logo').removeClass('stopped').addClass('started');
        };
      })(this));
    };

    GyroscopeAccount.prototype.updateState = function() {
      $.ajax({
        url: '/api/v1/account/state/',
        method: 'GET',
        dataType: 'json',
        success: (function(_this) {
          return function(data) {
            _this.updateStateClasses(data.classes);
            _this.updateNotificationData(data.friend_requests);
            if (data.connected_count > 1) {
              if ($('body').hasClass('waitlist')) {
                timeoutSet(10000, gyroscope.checkInvited);
                return timeoutSet(30000, gyroscope.checkInvited);
              }
            }
          };
        })(this)
      });
      return this.checkIfSameUser();
    };

    GyroscopeAccount.prototype.checkInvited = function() {
      return $.ajax({
        url: '/api/v1/account/',
        method: 'GET',
        dataType: 'json',
        success: (function(_this) {
          return function(data) {
            if (data.user && data.user.tags && data.user.tags.indexOf('invited') !== -1) {
              return $('body').addClass('valid-code');
            } else {
              console.log('Account still needs data');
              return console.log(data.tags);
            }
          };
        })(this)
      });
    };

    GyroscopeAccount.prototype.checkCurrentUser = function() {
      if (!this.currentUserId) {
        return $.ajax({
          url: '/api/v1/account/',
          method: 'GET',
          dataType: 'json',
          success: (function(_this) {
            return function(data) {
              if (data && data.user) {
                return _this.currentUserId = data.user.id;
              }
            };
          })(this)
        });
      }
    };

    GyroscopeAccount.prototype.checkIfSameUser = function() {
      if (this.currentUserId) {
        $.ajax({
          url: '/api/v1/account/',
          method: 'GET',
          dataType: 'json',
          success: (function(_this) {
            return function(data) {
              if (data && data.user) {
                if (_this.currentUserId) {
                  if (_this.currentUserId !== data.user.id) {
                    return _this.invalidateUser();
                  } else {

                  }
                }
              }
            };
          })(this)
        });
      }
    };

    GyroscopeAccount.prototype.invalidateUser = function() {
      alert('Sorry, this integration is already connected to another account. Disconnect from the old account before adding to a new one. Please contact us if you think this is an error or need help!');
      return window.location.replace('/logout/');
    };

    GyroscopeAccount.prototype.updateStateClasses = function(classes) {
      var status;
      return status = $('#user-state').first().attr('class', classes);
    };

    GyroscopeAccount.prototype.updateNotificationData = function(friend_requests) {
      var bubble, link_count;
      bubble = $('.dropdown .bubble');
      bubble.attr('data-requests-count', friend_requests).html(friend_requests);
      link_count = $('.dropdown-menu .friend-requests-count');
      link_count.attr('data-count', friend_requests).html(friend_requests);
      return this.displayNotifications();
    };

    GyroscopeAccount.prototype.displayNotifications = function() {
      var bubble, link_count;
      bubble = $('.dropdown .bubble');
      bubble.toggleClass('showing', bubble.attr('data-requests-count') > 0);
      link_count = $('.dropdown-menu .friend-requests-count');
      link_count.toggleClass('showing', link_count.attr('data-count') > 0);
      link_count = $('.dropdown-menu .group-alert-count');
      return link_count.toggleClass('showing', link_count.attr('data-count') > 0);
    };

    return GyroscopeAccount;

  })();

  window.GyroscopeDashboard = (function() {
    function GyroscopeDashboard(base) {
      this.bindGroupViewAll();
      this.bindFriendsMore();
      this.bindChromeInstall();
      this.bindNavigation();
      this.stripeLoaded = false;
      this.base = base;
    }

    GyroscopeDashboard.prototype.init = function() {
      gyroscope.aileron.timeouts.push(timeoutSet(950, function() {
        return gyroscope.extras.startIncrementingAge();
      }));
      $('body').removeClass('groups-hydrated groups-intro friends-hydrated friends-intro reports-hydrated reports-intro').addClass('reports-intro');
      this.previewing = 'reports';
      this.updatePreviewingClass(this.previewing);
      this.checkChromeInstall();
      timeoutSet(600, (function(_this) {
        return function() {
          return _this.dehydrate(1);
        };
      })(this));
      timeoutSet(700, (function(_this) {
        return function() {
          return _this.dehydrate(1);
        };
      })(this));
      timeoutSet(800, (function(_this) {
        return function() {
          return _this.dehydrate(1);
        };
      })(this));
      timeoutSet(900, (function(_this) {
        return function() {
          return _this.dehydrate(1);
        };
      })(this));
      timeoutSet(1000, (function(_this) {
        return function() {
          return _this.dehydrate(3);
        };
      })(this));
      this.friendsLoaded = false;
      this.groupsLoaded = false;
      timeoutSet(2000, (function(_this) {
        return function() {
          return _this.loadFriends();
        };
      })(this));
      return timeoutSet(9000, (function(_this) {
        return function() {
          return _this.loadGroups();
        };
      })(this));
    };

    GyroscopeDashboard.prototype.switchToSection = function(section) {
      if (!$('body').hasClass('animating')) {
        return;
      }
      $('body').removeClass('intro');
      this.previewing = section;
      this.updatePreviewingClass(section);
      if (section === 'reports') {
        $('#page .spinning.logo').removeClass('stopped').addClass('started');
        $('body').addClass('reports-intro');
      } else {
        $('#page .spinning.logo').addClass('stopped').removeClass('started');
      }
      if (section === 'friends') {
        if (!this.friendsLoaded) {
          this.loadFriends();
        } else {
          $('body').addClass('friends-intro');
          timeoutSet(1000, function() {
            return $('body').removeClass('friends-intro');
          });
        }
        if (!this.groupsLoaded) {
          this.loadGroups();
        } else {
          $('body').addClass('groups-intro');
          timeoutSet(1000, function() {
            return $('body').removeClass('groups-intro');
          });
        }
      }
      if (section === 'pro') {
        $('body').addClass('pro-intro');
        if (this.removingProIntro) {
          clearTimeout(this.removingProIntro);
        }
        this.removingProIntro = timeoutSet(900, function() {
          return $('body').removeClass('pro-intro');
        });
        if (!this.stripeLoaded) {
          timeoutSet(600, (function(_this) {
            return function() {
              _this.base.payments.setupStripe();
              return _this.stripeLoaded = true;
            };
          })(this));
        }
      }
      if (section === 'store') {
        $('body').addClass('store-intro');
        if (this.removingStoreIntro) {
          clearTimeout(this.removingStoreIntro);
        }
        this.removingStoreIntro = timeoutSet(900, function() {
          return $('body').removeClass('store-intro');
        });
      }
      if (section === 'account') {
        $('body').addClass('account-intro');
        if (this.removingAccountIntro) {
          clearTimeout(this.removingAccountIntro);
        }
        return this.removingAccountIntro = timeoutSet(900, function() {
          return $('body').removeClass('account-intro');
        });
      }
    };

    GyroscopeDashboard.prototype.updatePreviewingClass = function(section) {
      $('body').removeClass('preview-reports preview-friends preview-company preview-pro preview-store preview-account').removeClass('hover-reports hover-friends hover-company hover-pro hover-store hover-account').addClass('preview-' + section);
      if (section === 'reports') {
        return timeoutSet(1000, function() {
          return $('body').removeClass('reports-intro');
        });
      }
    };

    GyroscopeDashboard.prototype.bindNavigation = function() {
      $(document).on('mouseenter', '.dashboard-nav a', (function(_this) {
        return function(e) {
          var link, section, url;
          if ($('html').hasClass('mobile')) {
            return;
          }
          link = $(e.currentTarget);
          url = link.attr('data-href');
          section = link.attr('data-section');
          if (section === _this.previewing) {
            return;
          }
          return _this.switchToSection(section);
        };
      })(this));
      return $(document).on('click', '.dashboard-nav a', (function(_this) {
        return function(e) {
          var link, section, url;
          link = $(e.currentTarget);
          url = link.attr('data-href');
          section = link.attr('data-section');
          if (section === _this.previewing) {
            return;
          }
          return _this.switchToSection(section);
        };
      })(this));
    };

    GyroscopeDashboard.prototype.loadFriends = function() {
      var FRIENDS_TTL, cachedFriendElements, cachedFriends, cachedFriendsTimestamp, container, now, url;
      if (this.friendsLoaded) {
        return;
      }
      container = $('#page .friends-partial').first();
      url = container.attr('data-url');
      if (localStorage) {
        cachedFriends = localStorage.getItem('dashboardFriendsPartial1');
        cachedFriendsTimestamp = new Date(localStorage.getItem('dashboardFriendsPartial1Timestamp'));
      } else {
        cachedFriends = false;
      }
      now = new Date();
      FRIENDS_TTL = 0.5;
      if (cachedFriends && cachedFriendsTimestamp && (now - cachedFriendsTimestamp < 60 * FRIENDS_TTL * 1000)) {
        cachedFriendElements = false;
        if (cachedFriends.indexOf('cacheable-friends-partial') !== -1 && cachedFriends.indexOf('dashboard-nav') === -1) {
          cachedFriendElements = $(cachedFriends);
        }
        if (cachedFriendElements.length) {
          container.html(cachedFriendElements);
          container.removeClass('dehydrated');
          timeoutSet(100, function() {
            return $('body').addClass('friends-hydrated friends-intro');
          });
          timeoutSet(2000, function() {
            return $('body').removeClass('friends-intro');
          });
        } else {
          this.fetchFriendsFromServer(container, url, true);
        }
      } else {
        this.fetchFriendsFromServer(container, url, true);
      }
      return this.friendsLoaded = true;
    };

    GyroscopeDashboard.prototype.fetchFriendsFromServer = function(container, url, mount) {
      return $.ajax({
        url: url,
        method: 'get',
        dataType: 'html',
        success: (function(_this) {
          return function(data) {
            if (mount) {
              container.html(data);
              container.removeClass('dehydrated');
              timeoutSet(20, function() {
                return $('body').addClass('friends-hydrated friends-intro');
              });
              timeoutSet(1000, function() {
                return $('body').removeClass('friends-intro');
              });
            }
            if (data && localStorage && data.indexOf('cacheable-friends-partial' !== -1)) {
              localStorage.setItem('dashboardFriendsPartial1', data);
              return localStorage.setItem('dashboardFriendsPartial1Timestamp', new Date());
            }
          };
        })(this)
      });
    };

    GyroscopeDashboard.prototype.loadGroups = function() {
      var container, url;
      if (this.groupsLoaded) {
        return;
      }
      container = $('#page .groups-partial');
      url = container.attr('data-url');
      $.ajax({
        url: url,
        method: 'get',
        dataType: 'html',
        success: (function(_this) {
          return function(data) {
            container.html(data);
            container.removeClass('dehydrated');
            timeoutSet(200, function() {
              return $('body').addClass('groups-hydrated groups-intro');
            });
            return timeoutSet(1000, function() {
              return $('body').removeClass('groups-intro');
            });
          };
        })(this)
      });
      return this.groupsLoaded = true;
    };

    GyroscopeDashboard.prototype.loadReports = function() {
      var container, url;
      container = $('#page .reports-partial');
      url = container.attr('data-url');
      return $.ajax({
        url: url,
        method: 'get',
        dataType: 'html',
        success: (function(_this) {
          return function(data) {
            container.html(data);
            container.removeClass('dehydrated');
            timeoutSet(60, function() {
              return $('body').addClass('reports-hydrated reports-intro');
            });
            timeoutSet(1000, function() {
              return $('body').removeClass('reports-intro');
            });
            timeoutSet(500, function() {
              return _this.dehydrate(1);
            });
            timeoutSet(900, function() {
              return _this.dehydrate(1);
            });
            return timeoutSet(1200, function() {
              return _this.dehydrate(2);
            });
          };
        })(this)
      });
    };

    GyroscopeDashboard.prototype.bindGroupViewAll = function() {
      return $(document).on('click', '.groups-title .mark-all', function(e) {
        var button, container, groups, url;
        e.preventDefault();
        button = $(e.currentTarget);
        url = button.attr('href');
        button.addClass('clicked');
        container = button.parents('.groups-container');
        groups = $('.group-item.unread', container);
        groups.removeClass('unread');
        return $.ajax({
          url: url,
          method: 'get',
          dataType: 'html',
          success: (function(_this) {
            return function(data) {};
          })(this)
        });
      });
    };

    GyroscopeDashboard.prototype.bindFriendsMore = function() {
      return $(document).on('click', '.friends-container .see-more', function(e) {
        e.preventDefault();
        return $('body').addClass('view-more-friends');
      });
    };

    GyroscopeDashboard.prototype.dehydrate = function(limit) {
      limit = limit || 1;
      return $('#page .iframe.dehydrated').each((function(_this) {
        return function(n, el) {
          var frame;
          frame = $(el);
          if (n < limit) {
            return _this.hydrate(frame);
          }
        };
      })(this));
    };

    GyroscopeDashboard.prototype.hydrate = function(frame) {
      var source;
      source = frame.attr('data-src');
      if ($('html').hasClass('mobile')) {
        source = source.replace('&copy=notright', '&copy=bottom');
        source = source.replace('&copy=left', '&copy=bottom');
        source = source.replace('&copy=bottomleft', '&copy=bottom');
        if (frame.attr('data-padding-mobile')) {
          source += '&padding=' + frame.attr('data-padding-mobile');
        }
      } else if (frame.attr('data-padding')) {
        if (frame.attr('data-padding')) {
          source += '&padding=' + frame.attr('data-padding');
        }
      }
      frame.attr('src', source);
      frame.removeClass('dehydrated');
      return timeoutSet(600, function() {
        return frame.addClass('hydrated');
      });
    };

    GyroscopeDashboard.prototype.bindChromeInstall = function() {
      return $(document).on('click', '.chrome-install-link', (function(_this) {
        return function(e) {
          var url;
          if (window.hasOwnProperty('chrome')) {
            e.preventDefault();
            if ($('#device-info').hasClass('extension-installed')) {
              return alert('Open a new tab to set up the extension! (Press ⌘+T)');
            } else {
              e.preventDefault();
              url = 'https://chrome.google.com/webstore/detail/ifakdojghbjeahenejfpgdfhhcmjgfle';
              chrome.webstore.install(url, function(details) {
                return $('#device-info').addClass('extension-installed');
              }, function(details) {
                return console.log('failure', details);
              });
              if (window.hasOwnProperty('fbq')) {
                return fbq('track', "Lead");
              }
            }
          }
        };
      })(this));
    };

    GyroscopeDashboard.prototype.checkChromeInstall = function() {
      var file, id;
      id = 'ifakdojghbjeahenejfpgdfhhcmjgfle';
      file = 'chrome-extension://' + id + '/info.txt';
      $.ajax({
        url: file,
        method: 'GET',
        dataType: 'text',
        success: (function(_this) {
          return function(data) {
            if (data) {
              return $('#device-info').addClass('extension-installed');
            }
          };
        })(this)
      });
      if (!window.hasOwnProperty('chrome')) {
        return $('#device-info').addClass('not-chrome');
      } else {
        return $('#device-info').addClass('is-chrome');
      }
    };

    return GyroscopeDashboard;

  })();

  window.GyroscopeFriends = (function() {
    function GyroscopeFriends() {
      this.bindRequestButtons();
      this.bindFeedLikes();
    }

    GyroscopeFriends.prototype.init = function() {
      return gyroscope.account.updateState();
    };

    GyroscopeFriends.prototype.bindRequestButtons = function() {
      $(document).on('click', '#page .accept-friend-request', (function(_this) {
        return function(e) {
          var form, person;
          e.preventDefault();
          person = $(e.currentTarget).parents('.person');
          form = $('#page .handle-request-form').first();
          if (!form.length) {
            return;
          }
          return _this.handleRequest('confirm', person, form);
        };
      })(this));
      return $(document).on('click', '#page .decline-friend-request', (function(_this) {
        return function(e) {
          var form, person;
          e.preventDefault();
          person = $(e.currentTarget).parents('.person');
          form = $('#page .handle-request-form').first();
          if (!form.length) {
            return;
          }
          return _this.handleRequest('decline', person, form);
        };
      })(this));
    };

    GyroscopeFriends.prototype.handledFriendRequests = [];

    GyroscopeFriends.prototype.handleRequest = function(action, person, form) {
      var details, id;
      id = person.attr('data-id');
      if (this.handledFriendRequests.indexOf(id) !== -1) {
        return;
      }
      this.handledFriendRequests.push(id);
      details = {
        user_id: id,
        action: action
      };
      $.ajax({
        method: 'POST',
        dataType: 'json',
        url: form.attr('action'),
        data: details,
        complete: (function(_this) {
          return function(data) {
            _this.updatePersonFromClick(action, person);
            return gyroscope.account.updateState();
          };
        })(this)
      });
      return false;
    };

    GyroscopeFriends.prototype.updatePersonFromClick = function(action, person) {
      if (action === 'decline') {
        return person.addClass('declined');
      } else if (action === 'confirm') {
        return person.addClass('accepted');
      }
    };

    GyroscopeFriends.prototype.bindFeedLikes = function() {
      return $(document).on('click', '.feed-item-like', (function(_this) {
        return function(e) {
          var button, countEl, id, liked;
          e.preventDefault();
          button = $(e.currentTarget);
          if (button.hasClass('pressing')) {
            return;
          }
          id = button.attr('data-id');
          countEl = $('.count', button);
          liked = button.hasClass('liked');
          if (liked) {
            return _this.handleCardUnlike(id, button, countEl);
          } else {
            return _this.handleCardLike(id, button, countEl);
          }
        };
      })(this));
    };

    GyroscopeFriends.prototype.handleCardLike = function(id, button, countEl) {
      var count;
      button.addClass('liked pressed');
      count = parseInt(countEl.text());
      countEl.text(count + 1);
      return this.unlike = $.ajax({
        method: 'post',
        dataType: 'json',
        url: '/api/v1/data/user/create/feeditem/like/',
        data: JSON.stringify({
          feed_item_id: id
        })
      }).done((function(_this) {
        return function(data) {
          if (data.error) {
            return alert(data.error);
          } else {
            return button.removeClass('pressing');
          }
        };
      })(this));
    };

    GyroscopeFriends.prototype.handleCardUnlike = function(id, button, countEl) {
      var count;
      button.removeClass('liked').addClass('pressing');
      count = parseInt(countEl.text());
      countEl.text(count - 1);
      return this.unlike = $.ajax({
        method: 'post',
        dataType: 'json',
        url: '/api/v1/data/user/delete/feeditem/like/',
        data: JSON.stringify({
          feed_item_id: id
        })
      }).done((function(_this) {
        return function(data) {
          if (data.error) {
            return alert(data.error);
          } else {
            return button.removeClass('pressing');
          }
        };
      })(this));
    };

    return GyroscopeFriends;

  })();

  window.GyroscopeGift = (function() {
    function GyroscopeGift() {
      this.bindGiftRedeem();
    }

    GyroscopeGift.prototype.init = function(page) {
      console.log('init');
      return $('.redeem-code-form .text-code').focus();
    };

    GyroscopeGift.prototype.bindGiftRedeem = function() {
      $(document).on('click', '.redeem-code-form .redeem-form-button', (function(_this) {
        return function(e) {
          var form;
          e.preventDefault();
          form = $(e.currentTarget);
          form.parents('.redeem-code-form');
          $('.form-submit', form).click();
          return false;
        };
      })(this));
      return $(document).on('submit', '.redeem-code-form', (function(_this) {
        return function(e) {
          var form;
          e.preventDefault();
          console.log('SUBMITTED');
          form = $('.redeem-code-form');
          _this.submitForm(form);
          return false;
        };
      })(this));
    };

    GyroscopeGift.prototype.submitForm = function(form) {
      var url;
      console.log('Posting', $('.text-code', form).val());
      url = $(form).attr('action');
      console.log('url is', url);
      return $.ajax({
        url: url,
        method: 'post',
        dataType: 'json',
        data: form.serialize(),
        success: (function(_this) {
          return function(data) {
            console.log(data);
            if (data.status === 'ok') {
              return _this.validCode();
            } else {
              return _this.invalidCode();
            }
          };
        })(this),
        error: (function(_this) {
          return function(data) {
            return _this.invalidCode();
          };
        })(this)
      });
    };

    GyroscopeGift.prototype.invalidCode = function() {
      return alert('Sorry, that gift code did not work. Please make sure it is typed correctly, or contact us for help.');
    };

    GyroscopeGift.prototype.validCode = function() {
      return $('body').addClass('paid');
    };

    return GyroscopeGift;

  })();

  window.GyroscopeGoals = (function() {
    function GyroscopeGoals() {
      this.bindCreateForm();
      this.bindGoalDeletions();
      this.goalCategories = ['steps', 'run', 'bike', 'workout', 'weight', 'bodyfat', 'computer', 'sleep', 'meditation'];
    }

    GyroscopeGoals.prototype.init = function() {
      return console.log('Goals... 🎯');
    };


    /* CREATION */

    GyroscopeGoals.prototype.bindCreateForm = function() {
      $(document).on('click', '.goal-types-list .goal-type', (function(_this) {
        return function(e) {
          var button, type;
          button = $(e.currentTarget);
          type = button.attr('data-id');
          return _this.selectGoalType(type);
        };
      })(this));
      $(document).on('click', '.goals-form .cancel-configuration', (function(_this) {
        return function(e) {
          var form;
          e.preventDefault();
          form = $('#page .goals-form').removeClass('type-selected').removeClass('configuring-' + _this.goalCategories.join(' configuring-'));
          return $('#page .create-goal-button').addClass('disabled');
        };
      })(this));
      $(document).on('click', '.configuration-list .configuration-option', (function(_this) {
        return function(e) {
          var button, list;
          e.preventDefault();
          button = $(e.currentTarget);
          list = button.parents('.configuration-list');
          $('.configuration-option', list).removeClass('selected');
          _this.selectButton(button);
          if ($('.configuration-option', list).length) {
            return $('#page .create-goal-button').removeClass('disabled');
          }
        };
      })(this));
      return $(document).on('click', '.goals-form .create-goal-button', (function(_this) {
        return function(e) {
          var button, form;
          button = $(e.currentTarget);
          if (button.hasClass('disabled')) {
            alert('Please select a goal first!');
            return;
          }
          if (_this.submitting) {
            return;
          }
          _this.submitting = true;
          console.log('start goal create!!');
          form = $('#page .goals-form');
          return form.submit();
        };
      })(this));
    };

    GyroscopeGoals.prototype.selectButton = function(button) {
      var form, goal_type, goal_value, slug, start_value;
      button.addClass('selected');
      start_value = button.attr('data-start-value');
      goal_value = button.attr('data-goal-value');
      goal_type = button.attr('data-type');
      slug = button.attr('data-slug');
      console.log('Setting form to', slug, goal_type);
      form = $('#page .goals-form .form-fields');
      $('.goal-slug', form).val(slug);
      $('.goal-type', form).val(goal_type);
      $('.goal-start-value').val(start_value);
      return $('.goal-value').val(goal_value);
    };

    GyroscopeGoals.prototype.selectGoalType = function(type) {
      var button;
      $('#page .goals-form').addClass('type-selected configuring-' + type);
      $('#page .create-goal-button').removeClass('disabled');
      button = $('#page .goal-type-configuration.for-' + type + ' .configuration-option.selected');
      if (button.length) {
        this.selectButton(button);
        return $('#page .create-goal-button').removeClass('disabled');
      } else {
        console.log('sup');
        return $('#page .create-goal-button').addClass('disabled');
      }
    };

    GyroscopeGoals.prototype.bindGoalDeletions = function() {
      return $(document).on('click', '.goals-list .goal-actions .delete-button', function(e) {
        var button, deleter, goal;
        e.preventDefault();
        button = $(e.currentTarget);
        goal = button.parents('.goal-item');
        goal.addClass('deleting');
        deleter = $('.delete-goal-form', goal);
        return deleter.submit();
      });
    };

    return GyroscopeGoals;

  })();

  window.GyroscopeGroups = (function() {
    function GyroscopeGroups() {
      this.bindInvites();
      this.bindCategoryChooser();
      this.bindSendInvite();
      this.bindSeeMore();
      this.bindGroupActions();
      this.bindRequestButton();
      this.bindRequestHandling();
      this.bindMessageReply();
      this.bindMessageDelete();
      this.bindInfiniteScroll();
    }

    GyroscopeGroups.prototype.init = function(page) {
      this.requested = false;
      this.deleted = false;
      this.loading = false;
      this.finished = false;
      if (page === 'messages') {
        this.loadMessages();
        this.loadMembers();
        return this.loadTwitterJs();
      } else if (page === 'invite') {
        this.loadFacebookJs();
        return this.loadTwitterJs();
      }
    };

    GyroscopeGroups.prototype.loadMessages = function() {
      var messageContainer, url;
      messageContainer = $('#page .dehydrated.messages-list');
      url = messageContainer.attr('data-url');
      if (!url) {
        return;
      }
      this.messagePage = 0;
      return $.ajax({
        url: url,
        method: 'get',
        dataType: 'html',
        success: (function(_this) {
          return function(data) {
            messageContainer.html(data);
            messageContainer.removeClass('dehydrated');
            _this.revealMessages(messageContainer);
            return _this.startInfiniteScroll();
          };
        })(this)
      });
    };

    GyroscopeGroups.prototype.loadMembers = function() {
      var membersContainer, url;
      membersContainer = $('#page .dehydrated.members-list');
      url = membersContainer.attr('data-url');
      if (!url) {
        return;
      }
      return $.ajax({
        url: url,
        method: 'get',
        dataType: 'html',
        success: (function(_this) {
          return function(data) {
            membersContainer.html(data);
            membersContainer.removeClass('dehydrated');
            return timeoutSet(300, function() {
              membersContainer.addClass('showing');
              return $('#page .sidebar-invitable-list').addClass('showing');
            });
          };
        })(this)
      });
    };

    GyroscopeGroups.prototype.bindGroupActions = function() {
      $(document).on('click', '#page .leave-group-button', (function(_this) {
        return function(e) {
          console.log("LEAVING GROUP");
          if (_this.deleted) {
            return;
          }
          _this.deleted = true;
          e.preventDefault();
          return $('#page #leave-group-form').submit();
        };
      })(this));
      return $(document).on('click', '#page .delete-group-button', (function(_this) {
        return function(e) {
          console.log("DELETING");
          if (_this.deleted) {
            return;
          }
          _this.deleted = true;
          e.preventDefault();
          return $('#page #delete-group-form').submit();
        };
      })(this));
    };

    GyroscopeGroups.prototype.bindInvites = function() {
      $(document).on('click', '#page .invite-item .accept-invite', (function(_this) {
        return function(e) {
          var action, button, form, invite;
          button = $(e.currentTarget);
          invite = button.parents('.invite-item');
          form = $('.invite-button-form', invite);
          action = 'accept';
          $('.action-value', form).val(action);
          return form.submit();
        };
      })(this));
      return $(document).on('click', '#page .invite-item .decline-invite', (function(_this) {
        return function(e) {
          var action, button, buttons, form;
          button = $(e.currentTarget);
          buttons = button.parents('.buttons');
          form = $('.invite-button-form', buttons);
          action = 'reject';
          $('.action-value', form).val(action);
          return form.submit();
        };
      })(this));
    };

    GyroscopeGroups.prototype.bindSendInvite = function() {
      return $(document).on('click', '#page .invitable .invite.button', (function(_this) {
        return function(e) {
          var button, id, invitable;
          e.preventDefault();
          button = $(e.currentTarget);
          invitable = button.parents('.invitable');
          id = button.attr('data-user');
          if (!id) {
            return;
          }
          if (invitable.hasClass('inviting')) {
            return;
          }
          invitable.addClass('inviting');
          return _this.sendInviteToUser(id, invitable);
        };
      })(this));
    };

    GyroscopeGroups.prototype.sendInviteToUser = function(id, element) {
      var data, form;
      form = $('#page .send-invite-form').first();
      $('.user-id-value', form).val(id);
      data = form.serialize();
      return $.ajax({
        url: form.attr('action'),
        method: 'post',
        dataType: 'json',
        data: data,
        success: (function(_this) {
          return function(data) {
            return element.addClass('invited');
          };
        })(this)
      });
    };

    GyroscopeGroups.prototype.bindCategoryChooser = function() {
      return $(document).on('click', '.category-chooser a', (function(_this) {
        return function(e) {
          var input, kind, li, link, parent;
          e.preventDefault();
          link = $(e.currentTarget);
          parent = link.parents('.category-option');
          kind = parent.attr('data-kind');
          input = $('#page .category-chooser-value').val(kind);
          $('.category-chooser .selected').removeClass('selected');
          li = $('.category-option.' + kind).addClass('selected');
          $('#page .create-group-button').addClass('activated');
          return $('#page .create-group-form .error').addClass('deactivated');
        };
      })(this));
    };

    GyroscopeGroups.prototype.bindSeeMore = function() {
      $(document).on('click', '.see-more-members', (function(_this) {
        return function(e) {
          e.preventDefault();
          return $('body').addClass('reveal-members');
        };
      })(this));
      return $(document).on('click', '.see-all-members', (function(_this) {
        return function(e) {
          e.preventDefault();
          return $('body').addClass('reveal-all-members reveal-members');
        };
      })(this));
    };

    GyroscopeGroups.prototype.bindRequestButton = function() {
      return $(document).on('click', '#page .request-entry', (function(_this) {
        return function(e) {
          var form, group;
          e.preventDefault();
          if (_this.requested) {
            return;
          }
          _this.requested = true;
          group = $(e.currentTarget).parents('.locked-group-info');
          form = $('#request-group-entry', group);
          return $.ajax({
            url: form.attr('action'),
            method: 'post',
            dataType: 'json',
            success: function(data) {
              return group.addClass('requested');
            },
            error: function(data) {
              return group.addClass('requested');
            }
          });
        };
      })(this));
    };

    GyroscopeGroups.prototype.bindRequestHandling = function() {
      $(document).on('click', '#page .accept-join-request', (function(_this) {
        return function(e) {
          var button, id, request;
          e.preventDefault();
          button = $(e.currentTarget);
          request = button.parents('.join-request');
          id = button.attr('data-id');
          return _this.handleJoinRequest(id, 'accept', request);
        };
      })(this));
      return $(document).on('click', '#page .deny-join-request', (function(_this) {
        return function(e) {
          var button, id, request;
          e.preventDefault();
          button = $(e.currentTarget);
          request = button.parents('.join-request');
          id = button.attr('data-id');
          return _this.handleJoinRequest(id, 'reject', request);
        };
      })(this));
    };

    GyroscopeGroups.prototype.bindMessageReply = function() {
      $(document).on('click', '.message .reply-action', (function(_this) {
        return function(e) {
          var button, message;
          e.preventDefault();
          button = $(e.currentTarget);
          message = button.parents('.message');
          return message.addClass('replying');
        };
      })(this));
      $(document).on('click', '.message .reply-bar .close', (function(_this) {
        return function(e) {
          var button, message;
          e.preventDefault();
          button = $(e.currentTarget);
          message = button.parents('.message');
          return message.removeClass('replying');
        };
      })(this));
      return $(document).on('click', '.message .emoji-reply', (function(_this) {
        return function(e) {
          var button, data, form, message, others, text;
          button = $(e.currentTarget);
          text = button.attr('data-reply');
          message = button.parents('.message');
          if (text && message) {
            others = $('.emoji-reply', message).not(button).removeClass('you-selected');
            if (button.hasClass('you-selected')) {

            } else {
              button.addClass('you-selected');
              message.addClass('replied');
              form = $('.reply-form', message).first();
              data = {
                reply: text
              };
              return $.ajax({
                url: form.attr('action'),
                method: 'post',
                dataType: 'json',
                data: data,
                success: function(data) {
                  return console.log('RESPONDED');
                }
              });
            }
          }
        };
      })(this));
    };

    GyroscopeGroups.prototype.bindMessageDelete = function() {
      return $(document).on('click', '.message .delete-this-message', (function(_this) {
        return function(e) {
          var button, form, message, url;
          e.preventDefault();
          button = $(e.currentTarget);
          message = button.parents('.message');
          if (message.hasClass('removing')) {
            return;
          }
          message.addClass('removing');
          form = $('.delete-form', message).first();
          url = form.attr('action');
          if (message && url) {
            return $.ajax({
              url: url,
              method: 'post',
              dataType: 'json',
              success: function(data) {
                console.log('DELETED!');
                return message.addClass('deleted');
              }
            });
          }
        };
      })(this));
    };

    GyroscopeGroups.prototype.handleJoinRequest = function(id, action, element) {
      var data, form;
      form = $('#page .handle-join-request').first();
      data = {
        action: action,
        request_id: id
      };
      return $.ajax({
        url: form.attr('action'),
        method: 'post',
        dataType: 'json',
        data: data,
        success: (function(_this) {
          return function(data) {
            if (action === 'accept') {
              return element.addClass('responded');
            } else {
              return element.addClass('responded rejected');
            }
          };
        })(this)
      });
    };

    GyroscopeGroups.prototype.bindInfiniteScroll = function() {
      return $(window).scroll($.throttle(150, (function(_this) {
        return function(e) {
          return _this.attemptLoadMoreMessages();
        };
      })(this)));
    };

    GyroscopeGroups.prototype.attemptLoadMoreMessages = function() {
      var position;
      if (gyroscope.aileron.currentSection !== 'group' && gyroscope.aileron.currentPage !== 'messages') {
        return;
      }
      if (this.finished || this.loading) {
        return;
      }
      position = $(window).scrollTop();
      if (position > this.pageHeight - 1600) {
        return this.loadMoreContent();
      }
    };

    GyroscopeGroups.prototype.startInfiniteScroll = function() {
      this.page = $('#page .group-page');
      this.pageHeight = this.page.height();
      this.finished = false;
      this.loading = false;
      return this.attemptLoadMoreMessages();
    };

    GyroscopeGroups.prototype.loadMoreContent = function() {
      var url;
      if (this.loading) {
        return;
      }
      if (this.finished) {
        return;
      }
      url = $('#page .messages-list').attr('data-url');
      this.messagePage += 1;
      if (url) {
        this.loading = true;
        $('body').addClass('loading-more-messages');
        return this.newContentLoading = $.ajax({
          method: 'get',
          dataType: 'html',
          data: {
            page: this.messagePage
          },
          url: url,
          success: (function(_this) {
            return function(data) {
              $('body').removeClass('loading-more-messages');
              return _this.appendMessages(data);
            };
          })(this),
          error: (function(_this) {
            return function() {
              _this.loading = false;
              _this.finished = true;
              return $('body').removeClass('loading-more-messages');
            };
          })(this)
        });
      }
    };

    GyroscopeGroups.prototype.appendMessages = function(data) {
      var container, new_messages;
      new_messages = $(data);
      if ($('.message', new_messages).length) {
        container = $('#page .messages-list');
        $('body').removeClass('loading-more-messages');
        $('h3', container).each((function(_this) {
          return function(n, el) {
            var title, unique;
            title = $(el);
            unique = title.attr('data-unique');
            if (unique) {
              return $(unique, new_messages).remove();
            }
          };
        })(this));
        container.append(new_messages);
        this.revealMessages(container);
        this.pageHeight = this.page.height();
        return this.loading = false;
      } else {
        this.finished = true;
        this.loading = false;
        $('body').addClass('end-of-messages').removeClass('loading-more-messages');
      }
    };

    GyroscopeGroups.prototype.revealMessages = function(container) {
      return $('h3, .message.dehydrated').each((function(_this) {
        return function(n, el) {
          var delay, item;
          delay = 200 + n * 32;
          item = $(el);
          return timeoutSet(delay, function() {
            return item.addClass('showing').removeClass('dehydrated');
          });
        };
      })(this));
    };

    GyroscopeGroups.prototype.loadFacebookJs = function() {
      var el;
      if ($('#fb-root').length && FB) {
        return FB.XFBML.parse();
      } else {
        el = '<div id="fb-root"></div>\n<script id="fb-script">(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&appId=309431422557180&version=v2.4";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, \'script\', \'facebook-jssdk\'));</script>';
        return $('body').append(el);
      }
    };

    GyroscopeGroups.prototype.loadTwitterJs = function() {
      return $('#page').append('<script async src="//platform.twitter.com/widgets.js" charset="utf-8" />');
    };

    return GyroscopeGroups;

  })();

  window.GyroscopeHelp = (function() {
    function GyroscopeHelp() {
      this.bindFaqOpen();
    }

    GyroscopeHelp.prototype.init = function() {
      return timeoutSet(1200, (function(_this) {
        return function() {
          return $('#page .spinning.logo').removeClass('stopped').addClass('started');
        };
      })(this));
    };

    GyroscopeHelp.prototype.bindFaqOpen = function() {
      return $(document).on('click', '.question-toggle', (function(_this) {
        return function(e) {
          var question, toggle;
          toggle = $(e.currentTarget);
          question = toggle.parents('.faq');
          return question.toggleClass('opened');
        };
      })(this));
    };

    return GyroscopeHelp;

  })();

  window.GyroscopePayments = (function() {
    function GyroscopePayments() {
      this.bindStripeHandlers();
    }

    GyroscopePayments.prototype.init = function() {
      return this.clicking = false;
    };

    GyroscopePayments.prototype.setupStripe = function() {
      if (window.hasOwnProperty('StripeCheckout') && !this.stripeHandlerMonthly) {
        this.stripeHandlerMonthly = StripeCheckout.configure({
          name: 'Gyroscope Pro',
          key: stripeKey,
          image: 'https://media.gyrosco.pe/images/icons/180.png',
          locale: 'auto',
          allowRememberMe: false,
          token: (function(_this) {
            return function(token) {
              return _this.handleTokenMonthly(token);
            };
          })(this)
        });
        this.stripeHandlerYearly = StripeCheckout.configure({
          name: 'Gyroscope Pro',
          key: stripeKey,
          image: 'https://media.gyrosco.pe/images/icons/180.png',
          locale: 'auto',
          allowRememberMe: false,
          token: (function(_this) {
            return function(token) {
              return _this.handleTokenYearly(token);
            };
          })(this)
        });
        this.stripeHandlerYearlySpecial = StripeCheckout.configure({
          name: 'Gyroscope Pro',
          key: stripeKey,
          image: 'https://media.gyrosco.pe/images/icons/180.png',
          locale: 'auto',
          allowRememberMe: false,
          token: (function(_this) {
            return function(token) {
              return _this.handleTokenYearlySpecial(token);
            };
          })(this)
        });
        return this.stripeHandlerEdit = StripeCheckout.configure({
          name: 'Gyroscope Pro',
          key: stripeKey,
          image: 'https://media.gyrosco.pe/images/icons/180.png',
          locale: 'auto',
          allowRememberMe: false,
          token: (function(_this) {
            return function(token) {
              return _this.handleTokenEdit(token);
            };
          })(this)
        });
      }
    };

    GyroscopePayments.prototype.setupStripeGift = function() {
      console.log('setup gift');
      if (window.hasOwnProperty('StripeCheckout') && !this.stripeHandlerGift) {
        return this.stripeHandlerGift = StripeCheckout.configure({
          name: 'Gyroscope',
          key: stripeKey,
          image: 'https://media.gyrosco.pe/images/icons/180.png',
          locale: 'auto',
          allowRememberMe: false,
          token: (function(_this) {
            return function(token) {
              return _this.handleTokenGift(token);
            };
          })(this)
        });
      }
    };

    GyroscopePayments.prototype.handleTokenGift = function(token) {
      if (token.id) {
        return $.ajax({
          method: 'post',
          url: '/payment/token/gift/',
          data: JSON.stringify({
            'stripe_token': token.id,
            'sku': 'pro-gift'
          })
        }).done((function(_this) {
          return function(data) {
            _this.clicking = false;
            console.log('succeeded!');
            if (data.status === 'ok') {
              _this.donePaying(data);
              if (data.code) {
                console.log('Code is', data.code);
                return $('.pro-gift-code').text(data.code);
              }
            } else {
              return alert('Sorry, something went wrong with that payment. Please try again or contact us if this continues happening.');
            }
          };
        })(this)).fail((function(_this) {
          return function() {
            _this.clicking = false;
            return alert('Sorry, we were unable to purchase this gift membership. Please contact us if this keeps happening.');
          };
        })(this));
      }
    };

    GyroscopePayments.prototype.handleTokenMonthly = function(token) {
      if (token.id) {
        return $.ajax({
          method: 'post',
          url: '/payment/token/',
          data: JSON.stringify({
            'stripe_token': token.id
          })
        }).done((function(_this) {
          return function(data) {
            console.log('succeeded!');
            _this.clicking = false;
            return _this.donePaying(data);
          };
        })(this)).fail((function(_this) {
          return function() {
            _this.clicking = false;
            return alert('Sorry, we were unable to complete the upgrade. Please contact us if this keeps happening.');
          };
        })(this));
      }
    };

    GyroscopePayments.prototype.handleTokenYearly = function(token) {
      if (token.id) {
        return $.ajax({
          method: 'post',
          url: '/payment/token/annual/',
          data: JSON.stringify({
            'stripe_token': token.id
          })
        }).done((function(_this) {
          return function(data) {
            _this.donePaying(data);
            return _this.clicking = false;
          };
        })(this)).fail((function(_this) {
          return function() {
            _this.clicking = false;
            return alert('Sorry, we were unable to complete the annual upgrade. Please contact us to fix this for you!');
          };
        })(this));
      } else {
        return alert('Something went wrong with the checkout. Please contact us if this keeps happening.');
      }
    };

    GyroscopePayments.prototype.handleTokenYearlySpecial = function(token) {
      if (token.id) {
        return $.ajax({
          method: 'post',
          url: '/payment/token/annual-60/',
          data: JSON.stringify({
            'stripe_token': token.id
          })
        }).done((function(_this) {
          return function(data) {
            _this.donePaying(data);
            return _this.clicking = false;
          };
        })(this)).fail((function(_this) {
          return function() {
            _this.clicking = false;
            return alert('Sorry, we were unable to complete the annual upgrade. Please contact us to fix this for you!');
          };
        })(this));
      } else {
        return alert('Something went wrong with the checkout. Please contact us if this keeps happening.');
      }
    };

    GyroscopePayments.prototype.handleTokenEdit = function(token) {
      var cardMonth, cardNumber;
      if (token.id) {
        cardMonth = token.card.exp_month.toString();
        if (cardMonth.length === 1) {
          cardMonth = "0" + cardMonth;
        }
        cardNumber = "**** **** **** " + token.card.last4;
        if (token.card.brand === "American Express") {
          cardNumber = "**** ****** *" + token.card.last4;
        }
        if (token.card.brand === "Diners Club") {
          cardNumber = "**** **** **" + token.card.last4.toString().slice(0, 2) + " " + token.card.last4.toString().slice(-2);
        }
        $('.credit-card .card-number').text(cardNumber);
        $('.credit-card .exp .month').text(cardMonth);
        $('.credit-card .exp .year').text(token.card.exp_year.toString().slice(-2));
        $('.credit-card .brand').attr('class', token.card.brand + ' brand');
        return $.ajax({
          method: 'post',
          url: '/payment/token/edit/',
          data: JSON.stringify({
            'stripe_token': token.id
          })
        }).done((function(_this) {
          return function(data) {
            console.log('succeeded!');
            _this.clicking = false;
            alert('Your card has been updated!');
            if (!$('.credit-card .card-number').length) {
              return window.location.reload();
            }
          };
        })(this)).fail((function(_this) {
          return function() {
            _this.clicking = false;
            return alert('Sorry, we were unable to complete this request. Please contact us if this keeps happening.');
          };
        })(this));
      }
    };

    GyroscopePayments.prototype.bindStripeHandlers = function() {
      if (this.bound) {
        return;
      }
      this.bound = true;
      $(document).on('click', '.pay-with-stripe', (function(_this) {
        return function(e) {
          var button, email;
          e.preventDefault();
          button = $(e.currentTarget);
          email = button.attr('data-email');
          if (_this.clicking) {
            return;
          }
          _this.clicking = true;
          if (!_this.stripeHandlerMonthly) {
            _this.setupStripe();
          }
          _this.stripeHandlerMonthly.open({
            description: 'Only $9.99/month for Pro!',
            email: email,
            panelLabel: 'Sign up ✨',
            zipCode: true,
            opened: function() {
              _this.clicking = false;
              return $('body').addClass('checkout-opened');
            },
            closed: function() {
              _this.clicking = false;
              return $('body').removeClass('checkout-opened');
            }
          });
          if (fbq) {
            return fbq('track', "InitiateCheckout");
          }
        };
      })(this));
      $(document).on('click', '.pay-with-stripe-annual', (function(_this) {
        return function(e) {
          var button, email;
          e.preventDefault();
          button = $(e.currentTarget);
          email = button.attr('data-email');
          if (_this.clicking) {
            return;
          }
          _this.clicking = true;
          if (!_this.stripeHandlerYearly) {
            _this.setupStripe();
          }
          _this.stripeHandlerYearly.open({
            description: '$69.99 a year! (Only 19¢ a day)',
            email: email,
            panelLabel: 'Sign up ⚡️',
            zipCode: true,
            opened: function() {
              _this.clicking = false;
              return $('body').addClass('checkout-opened');
            },
            closed: function() {
              _this.clicking = false;
              return $('body').removeClass('checkout-opened');
            }
          });
          if (fbq) {
            return fbq('track', "InitiateCheckout");
          }
        };
      })(this));
      $(document).on('click', '.pay-with-stripe-annual-discount', (function(_this) {
        return function(e) {
          var button, email;
          e.preventDefault();
          button = $(e.currentTarget);
          email = button.attr('data-email');
          if (_this.clicking) {
            return;
          }
          _this.clicking = true;
          if (!_this.stripeHandlerYearlySpecial) {
            _this.setupStripe();
          }
          _this.stripeHandlerYearlySpecial.open({
            description: 'Only $59.99/year · Save 30%!',
            email: email,
            panelLabel: 'Upgrade to Pro',
            zipCode: true,
            opened: function() {
              _this.clicking = false;
              return $('body').addClass('checkout-opened');
            },
            closed: function() {
              _this.clicking = false;
              return $('body').removeClass('checkout-opened');
            }
          });
          if (fbq) {
            return fbq('track', "InitiateCheckout");
          }
        };
      })(this));
      $(document).on('click', '.pay-with-stripe-gift-subscription', (function(_this) {
        return function(e) {
          var button, email;
          e.preventDefault();
          button = $(e.currentTarget);
          email = button.attr('data-email');
          if (_this.clicking) {
            return;
          }
          _this.clicking = true;
          if (!_this.stripeHandlerGift) {
            _this.setupStripeGift();
          }
          _this.stripeHandlerGift.open({
            description: 'One year of Pro · $69',
            email: email,
            panelLabel: 'Purchase Gift',
            zipCode: true,
            opened: function() {
              _this.clicking = false;
              return $('body').addClass('checkout-opened');
            },
            closed: function() {
              _this.clicking = false;
              return $('body').removeClass('checkout-opened');
            }
          });
          if (fbq) {
            return fbq('track', "InitiateCheckout");
          }
        };
      })(this));
      $(document).on('click', '.update-payment-details', (function(_this) {
        return function(e) {
          var button, email;
          e.preventDefault();
          button = $(e.currentTarget);
          email = button.attr('data-email');
          if (!_this.stripeHandlerEdit) {
            _this.setupStripe();
          }
          return _this.stripeHandlerEdit.open({
            email: email,
            panelLabel: 'Update billing info',
            zipCode: true,
            opened: function() {
              return $('body').addClass('checkout-opened');
            },
            closed: function() {
              return $('body').removeClass('checkout-opened');
            }
          });
        };
      })(this));
      $(document).on('click', '.reactivate-subscription', (function(_this) {
        return function(e) {
          e.preventDefault();
          $('body').addClass('paying');
          $.ajax({
            url: '/billing/reactivate/',
            method: 'post'
          }).done(function(data) {
            return _this.donePaying(data);
          });
          if (fbq) {
            return fbq('track', "InitiateCheckout");
          }
        };
      })(this));
      $(document).on('click', '.switch-to-annual', (function(_this) {
        return function(e) {
          e.preventDefault();
          if (_this.clicking) {
            return;
          }
          _this.clicking = true;
          $('body').addClass('paying');
          return $.ajax({
            url: '/billing/yearly/',
            method: 'post'
          }).done(function(data) {
            return _this.donePaying(data);
          });
        };
      })(this));
      $(document).on('click', '.use-existing-details', (function(_this) {
        return function(e) {
          e.preventDefault();
          if (_this.clicking) {
            return;
          }
          _this.clicking = true;
          $('body').addClass('paying');
          return $.ajax({
            url: '/payment/token/',
            method: 'post',
            data: JSON.stringify({
              'stripe_token': 'existing_customer'
            })
          }).done(function(data) {
            return _this.donePaying(data);
          });
        };
      })(this));
      return $(window).on('popstate', (function(_this) {
        return function() {
          if (_this.stripeHandlerMonthly) {
            _this.stripeHandlerMonthly.close();
          }
          if (_this.stripeHandlerYearly) {
            _this.stripeHandlerYearly.close();
          }
          if (_this.stripeHandlerYearlySpecial) {
            _this.stripeHandlerYearlySpecial.close();
          }
          return _this.clicking = false;
        };
      })(this));
    };

    GyroscopePayments.prototype.donePaying = function(data) {
      this.clicking = false;
      $('#user-state').first().removeClass('billing-invalid').addClass('paid');
      if ($('.credit-card.invalid').length) {
        return window.location.reload();
      } else {
        $('body').addClass('paid');
        $('.upgrade.promo').remove();
        if (window.hasOwnProperty('fbq')) {
          return fbq('track', "Purchase", {
            content_type: 'product',
            value: 7,
            currency: 'USD'
          });
        }
      }
    };

    return GyroscopePayments;

  })();

  window.GyroscopePlaces = (function() {
    function GyroscopePlaces() {}

    GyroscopePlaces.prototype.init = function() {
      this.startMaps();
      this.bindLocationLinks();
      return this.bindSkipLinks();
    };

    GyroscopePlaces.prototype.startMaps = function() {
      var bounds, featureLayer, i, j, map, mapStyle, ref, results;
      L.mapbox.accessToken = 'pk.eyJ1IjoiZ3lyb3Njb3BlIiwiYSI6ImNQb0ZFQXMifQ.02b2nGQcu4-DYKSyYsenHg';
      mapStyle = 'gyroscope.je0lgn7c';
      results = [];
      for (i = j = 0, ref = window.num_clusters; j < ref; i = j += 1) {
        map = L.mapbox.map('cluster-map-' + i, mapStyle, {
          zoomControl: false,
          legendControl: false,
          attributionControl: false,
          continuousWorld: false,
          noWrap: true,
          featureLayer: false
        });
        featureLayer = L.mapbox.featureLayer().addTo(map);
        featureLayer.setGeoJSON(window.clusters[i]);
        bounds = featureLayer.getBounds();
        results.push(map.fitBounds(bounds, {
          paddingTopLeft: [20, 20],
          paddingBottomRight: [20, 20]
        }));
      }
      return results;
    };

    GyroscopePlaces.prototype.bindLocationLinks = function() {
      return $(document).on('click', '.location-link', (function(_this) {
        return function(e) {
          var clusterIndex, elt, itemIds, locationId;
          elt = $(e.currentTarget);
          locationId = elt.data('location-id');
          clusterIndex = parseInt(elt.data('cluster-index'), 10);
          itemIds = window.cluster_ids[clusterIndex];
          $.ajax({
            method: 'post',
            dataType: 'json',
            url: '/api/location/associate/',
            data: JSON.stringify({
              item_ids: itemIds,
              location_id: locationId
            })
          }).done(function(data) {
            return elt.closest('.cluster').remove();
          });
          return false;
        };
      })(this));
    };

    GyroscopePlaces.prototype.bindSkipLinks = function() {
      return $(document).on('click', '.skip-link', (function(_this) {
        return function(e) {
          var clusterIndex, elt, itemIds;
          elt = $(e.currentTarget);
          clusterIndex = parseInt(elt.data('cluster-index'), 10);
          itemIds = window.cluster_ids[clusterIndex];
          $.ajax({
            method: 'post',
            dataType: 'json',
            url: '/api/location/associate/',
            data: JSON.stringify({
              item_ids: itemIds,
              skip: true
            })
          }).done(function(data) {
            return elt.closest('.cluster').remove();
          });
          return false;
        };
      })(this));
    };

    return GyroscopePlaces;

  })();

  window.GyroscopeReports = (function() {
    function GyroscopeReports() {
      this.bindSeeMore();
    }

    GyroscopeReports.prototype.init = function() {
      return this.showReports();
    };

    GyroscopeReports.prototype.showReports = function() {
      return $('#page .reports-list .week-link, #page .reports-list .year-link').each(function(n, el) {
        var delay, item;
        item = $(el);
        delay = 350 + 64 * n;
        delay = Math.min(2000, delay);
        return timeoutSet(delay, function() {
          return item.addClass('showing');
        });
      });
    };

    GyroscopeReports.prototype.bindSeeMore = function() {
      return $(document).on('click', '.reveal-below-fold', (function(_this) {
        return function(e) {
          var button;
          button = $(e.currentTarget);
          button.addClass('activated');
          return $('#page .below-fold').removeClass('below-fold');
        };
      })(this));
    };

    return GyroscopeReports;

  })();

  window.GyroscopeRequests = (function() {
    function GyroscopeRequests() {
      this.bindFeatures();
    }

    GyroscopeRequests.prototype.init = function() {
      return this.loadFeatures();
    };

    GyroscopeRequests.prototype.bindFeatures = function() {
      $(document).on('click', '.requests-list li .request', (function(_this) {
        return function(e) {
          var feature, link;
          e.preventDefault();
          feature = $(e.currentTarget).parents('li');
          feature.toggleClass('requested');
          link = $(e.currentTarget);
          if (_this.requestFeature) {
            _this.requestFeature.abort();
          }
          return _this.requestFeature = $.ajax({
            method: 'POST',
            dataType: 'json',
            url: link.data('apiUrl'),
            data: '{}'
          });
        };
      })(this));
      return $(document).on('click', '.requests-list li .cancel', (function(_this) {
        return function(e) {
          var feature, link;
          e.preventDefault();
          feature = $(e.currentTarget).parents('li');
          feature.toggleClass('requested');
          link = $(e.currentTarget);
          if (_this.unRequestFeature) {
            _this.unRequestFeature.abort();
          }
          return _this.unRequestFeature = $.ajax({
            method: 'DELETE',
            dataType: 'json',
            url: link.data('apiUrl'),
            data: '{}'
          });
        };
      })(this));
    };

    GyroscopeRequests.prototype.loadFeatures = function() {
      return $('#page .requests-list li').each((function(_this) {
        return function(n, el) {
          var item;
          item = $(el);
          return timeoutSet(133 + 32 * n, function() {
            return item.addClass('showing');
          });
        };
      })(this));
    };

    return GyroscopeRequests;

  })();

  window.GyroscopeSettings = (function() {
    function GyroscopeSettings() {
      this.bindUsernameSettings();
      this.bindMobileSheet();
      this.bindLogoClicks();
      this.bindImporterClicks();
      this.bindPrivacySettings();
      this.bindDisconnect();
      this.bindDomainForm();
    }

    GyroscopeSettings.prototype.init = function() {
      gyroscope.aileron.timeouts.push(timeoutSet(1100, function() {
        return gyroscope.extras.startIncrementingAge();
      }));
      this.username_settings = $('#page .username-settings').first();
      this.current_username = this.username_settings.attr('data-current');
      this.last_username = this.username_settings.find('.username-field').val();
      this.revealCategories();
      return this.checkForHash();
    };

    GyroscopeSettings.prototype.revealCategories = function() {
      var categories;
      categories = $('#page .scrollable-importers .category');
      return categories.each((function(_this) {
        return function(n, el) {
          var category;
          category = $(el);
          return timeoutSet(100 + 280 * n, function() {
            return category.addClass('showing');
          });
        };
      })(this));
    };

    GyroscopeSettings.prototype.checkForHash = function() {
      var category, hash, importer;
      if ($('#device-info').hasClass('mobile')) {
        if (hash = window.location.hash.replace('#', '').trim()) {
          if (importer = $('.category li.' + hash)) {
            category = importer.parents('.category');
            if (category.length && category.attr('data-category')) {
              return this.switchFocus(category.attr('data-category'));
            }
          }
        }
      }
    };

    GyroscopeSettings.prototype.bindUsernameSettings = function() {
      $(document).on('keypress', '.username-form .username-field', (function(_this) {
        return function(e) {
          var input;
          input = $(e.currentTarget);
          return timeoutSet(10, function() {
            return _this.updateInput(input);
          });
        };
      })(this));
      $(document).on('keydown', '.username-form .username-field', (function(_this) {
        return function(e) {
          var input;
          input = $(e.currentTarget);
          return timeoutSet(15, function() {
            return _this.updateInput(input);
          });
        };
      })(this));
      $(document).on('blur', '.username-form .username-field', (function(_this) {
        return function(e) {
          var input;
          input = $(e.currentTarget);
          if (input.val() === '') {
            return _this.cancelInput(input);
          }
        };
      })(this));
      $(document).on('click', '.cancel-username', (function(_this) {
        return function(e) {
          var input;
          input = _this.username_settings.find('.username-field');
          return _this.cancelInput(input);
        };
      })(this));
      $(document).on('click', '.switch-username', (function(_this) {
        return function(e) {
          var form;
          form = $(e.currentTarget).parents('form');
          form.submit();
          return false;
        };
      })(this));
      return $(document).on('submit', '#page .username-form', (function(_this) {
        return function(e) {
          var form, input, new_username;
          e.preventDefault();
          form = $(e.currentTarget);
          input = form.find('.username-field');
          new_username = input.val().replace(/[^a-z0-9\_\-]/gi, '');
          if (new_username === _this.current_username) {
            _this.username_settings.removeClass('empty short same available unavailable');
            return false;
          }
          if (_this.usernameChange) {
            _this.usernameChange.abort();
          }
          _this.usernameChange = $.ajax({
            method: 'post',
            dataType: 'json',
            url: '/api/account/username/',
            data: JSON.stringify({
              username: new_username
            })
          }).done(function(data) {
            if (data.error) {
              return alert(data.error);
            }
            analytics.track('Changed Username', {
              Old: _this.current_username,
              New: new_username
            });
            _this.current_username = new_username;
            $('.profile-preview-link').attr('href', '/' + new_username);
            return $('.live-username').text(new_username);
          });
          _this.username_settings.find('.username-preview').text(new_username);
          _this.username_settings.removeClass('empty short same available unavailable');
          return false;
        };
      })(this));
    };

    GyroscopeSettings.prototype.cancelInput = function(input) {
      input.val(this.current_username);
      return this.updateInput(input);
    };

    GyroscopeSettings.prototype.updateInputDisplay = function(input, username, classes) {
      this.username_settings.find('.username-preview').text(username);
      return this.username_settings.removeClass('empty short same available unavailable').addClass(classes);
    };

    GyroscopeSettings.prototype.updateInput = function(input) {
      var new_username;
      if (this.last_username === input.val()) {
        return;
      }
      new_username = input.val().replace(/[^a-z0-9\_\-]/gi, '');
      this.last_username = new_username;
      input.val(new_username);
      if (new_username === '') {
        return this.updateInputDisplay(input, new_username, 'empty');
      } else if (new_username.length < 2) {
        return this.updateInputDisplay(input, new_username, 'short');
      } else if (new_username === this.current_username) {
        return this.updateInputDisplay(input, new_username, 'same');
      }
      if (this.usernameCheck) {
        this.usernameCheck.abort();
      }
      return this.usernameCheck = $.ajax({
        method: 'get',
        dataType: 'json',
        data: {
          username: new_username
        },
        url: '/api/account/username/check/'
      }).done((function(_this) {
        return function(data) {
          if (data.taken) {
            return _this.updateInputDisplay(input, new_username, 'unavailable');
          } else {
            return _this.updateInputDisplay(input, new_username, 'available');
          }
        };
      })(this));
    };

    GyroscopeSettings.prototype.bindMobileSheet = function() {
      $(document).on('click', '.navigation-sheet .switch-focus', (function(_this) {
        return function(e) {
          var target;
          e.preventDefault();
          target = $(e.currentTarget).attr('href').replace('#', '');
          return _this.switchFocus(target);
        };
      })(this));
      return $(document).on('click', '.back-to-settings', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.removeFocus();
        };
      })(this));
    };

    GyroscopeSettings.prototype.switchFocus = function(subsection) {
      return $('body').removeClass('going-up').addClass('focused focus-' + subsection);
    };

    GyroscopeSettings.prototype.removeFocus = function() {
      return $('body').removeClass('focused').removeClass('focus-account focus-exercise focus-health focus-digital');
    };

    GyroscopeSettings.prototype.bindLogoClicks = function() {
      return $(document).on('click', '.importers li .circle-logo', (function(_this) {
        return function(e) {
          var classname, connection, importer, logo;
          if ($('#device-info').hasClass('mobile')) {
            return;
          }
          e.stopPropagation();
          e.preventDefault();
          logo = $(e.currentTarget);
          classname = logo.attr('class').replace(' circle-logo', '');
          importer = logo.parents('li');
          connection = importer.find('.remote-connection').first();
          if (!connection.length) {
            return;
          }
          if ($('#user-state').hasClass('added-' + classname)) {
            if (!$('#user-state').hasClass('expired-' + classname)) {
              return;
            }
          }
          if (!$('#device-info').hasClass('mobile')) {
            return connection.click();
          }
        };
      })(this));
    };

    GyroscopeSettings.prototype.bindImporterClicks = function() {
      $(document).on('click', '.importers li', (function(_this) {
        return function(e) {
          var classname, connection, importer;
          if (!$('#device-info').hasClass('mobile')) {
            return;
          }
          if (!$('#device-info').hasClass('cursor')) {
            return;
          }
          e.preventDefault();
          e.stopPropagation();
          importer = $(e.currentTarget);
          classname = importer.attr('class');
          connection = importer.find('.remote-connection').first();
          if (!connection.length) {
            return;
          }
          if ($('#user-state').hasClass('added-' + classname)) {
            if (!$('#user-state').hasClass('expired-' + classname)) {
              return;
            }
          }
          return window.location.href = connection.attr('data-href');
        };
      })(this));
      return $(document).on('touchstart', '.importers li', (function(_this) {
        return function(e) {
          var classname, connection, importer;
          if (!$('#device-info').hasClass('mobile')) {
            return;
          }
          if ($('#device-info').hasClass('cursor')) {
            return;
          }
          e.preventDefault();
          e.stopPropagation();
          importer = $(e.currentTarget);
          classname = importer.attr('class');
          connection = importer.find('.remote-connection').first();
          if (!connection.length) {
            return;
          }
          if ($('#user-state').hasClass('added-' + classname)) {
            if (!$('#user-state').hasClass('expired-' + classname)) {
              return;
            }
          }
          return window.location.href = connection.attr('data-href');
        };
      })(this));
    };

    GyroscopeSettings.prototype.bindDisconnect = function() {
      return $(document).on('click', '.importers .delete', (function(_this) {
        return function(e) {
          var button, form, importer;
          e.preventDefault();
          button = $(e.currentTarget);
          importer = button.parents('li');
          if (!importer.length) {
            return;
          }
          _this.deleting = true;
          _this.startDeletion();
          form = $('form.disconnect', importer);
          if (form) {
            return timeoutSet(80, function() {
              return form.submit();
            });
          }
        };
      })(this));
    };

    GyroscopeSettings.prototype.startDeletion = function() {
      return $('body').addClass('deleting blocking');
    };

    GyroscopeSettings.prototype.bindPrivacySettings = function() {
      return $(document).on('change', '.privacy-form .radio', (function(_this) {
        return function(e) {
          var new_setting, radio;
          radio = $(e.currentTarget);
          new_setting = radio.val();
          if (!new_setting) {
            return;
          }
          if (_this.privacyChange) {
            _this.privacyChange.abort();
          }
          return _this.privacyChange = $.ajax({
            method: 'post',
            dataType: 'json',
            url: '/api/account/visibility/',
            data: JSON.stringify({
              visibility: new_setting
            })
          }).done(function(data) {
            if (data.error) {
              return alert(data.error);
            } else {
              _this.oldPrivacy = new_setting === "public" ? "friends" : "public";
              analytics.track('Changed Privacy', {
                New: new_setting,
                Old: _this.oldPrivacy
              });
              return _this.privacySwitchSuccessful();
            }
          });
        };
      })(this));
    };

    GyroscopeSettings.prototype.privacySwitchSuccessful = function() {};

    GyroscopeSettings.prototype.bindDomainForm = function() {
      $(document).on('click', '.domain-form .save-button', (function(_this) {
        return function(e) {
          var form, value;
          form = $(e.currentTarget).parents('#page .domain-form-element');
          value = $('.text', form).val();
          return form.submit();
        };
      })(this));
      return $(document).on('submit', '.domain-form-element', (function(_this) {
        return function(e) {
          var form, invalid, value;
          form = $(e.currentTarget);
          value = $('.text', form).val();
          invalid = _this.invalidUrl(value);
          if (!invalid) {

          } else {
            e.preventDefault();
            return alert(invalid);
          }
        };
      })(this));
    };

    GyroscopeSettings.prototype.invalidUrl = function(value) {
      if (value === '') {
        return false;
      }
      if (value.indexOf('/') >= 0) {
        return "Domain name can't have / or any paths. The format should be www.domain.com";
      }
      if (value.indexOf('http:') >= 0) {
        return "Domain name shouldn't include http. The format should be www.domain.com";
      }
      if (value.replace('.', '').replace('.', '').replace('.', '').indexOf('.') >= 0) {
        return "Invalid domain name.";
      }
      if (value.indexOf('.') < 0) {
        return "Invalid domain name! Please enter a domain (with subdomain) you own, for example www.domain.com";
      }
      return false;
    };

    return GyroscopeSettings;

  })();

  window.GyroscopeStore = (function() {
    function GyroscopeStore() {
      this.bindAffiliateLinks();
      this.bindBundleLinks();
      this.bindPosterPreview();
      this.bindCheckout();
    }

    GyroscopeStore.prototype.init = function(page) {
      this.userId = $('#user-state').attr('data-user-id');
      this.isPro = $('#user-state').attr('data-user-pro');
      if (page === 'posters' || page === 'book') {
        if (($('#page .twitter-button').length)) {
          timeoutSet(600, (function(_this) {
            return function() {
              return _this.loadTwitterJs();
            };
          })(this));
        }
        if (($('#page .facebook-button').length)) {
          timeoutSet(900, (function(_this) {
            return function() {
              return _this.loadFacebookJs();
            };
          })(this));
        }
      }
      if (page === 'book_order') {
        this.setupStripeBook();
      }
      if (page === 'poster_order') {
        this.setupStripePoster();
        return this.updateCityNameText();
      }
    };

    GyroscopeStore.prototype.setupStripeBook = function() {
      if (window.hasOwnProperty('StripeCheckout') && !this.stripeHandlerBook) {
        return this.stripeHandlerBook = StripeCheckout.configure({
          name: 'Gyroscope Annual Report',
          key: stripeKey,
          image: 'https://media.gyrosco.pe/images/icons/180.png',
          locale: 'auto',
          allowRememberMe: false,
          token: (function(_this) {
            return function(token) {
              return _this.handleTokenBook(token);
            };
          })(this)
        });
      }
    };

    GyroscopeStore.prototype.setupStripePoster = function() {
      if (window.hasOwnProperty('StripeCheckout') && !this.stripeHandlerPoster) {
        return this.stripeHandlerPoster = StripeCheckout.configure({
          name: 'Custom design & print',
          key: stripeKey,
          image: 'https://media.gyrosco.pe/images/icons/180.png',
          locale: 'auto',
          allowRememberMe: false,
          token: (function(_this) {
            return function(token) {
              return _this.handleTokenPoster(token);
            };
          })(this)
        });
      }
    };

    GyroscopeStore.prototype.handleTokenBook = function(token) {
      var order, orderData;
      if (token.id) {
        orderData = {
          stripe_token: token.id,
          details: this.details_string,
          address: this.address,
          city: this.city,
          state: this.state,
          zip: this.zip,
          country: this.country
        };
        order = JSON.stringify(orderData);
        return $.ajax({
          method: 'post',
          url: '/payment/token/book/',
          data: order
        }).done((function(_this) {
          return function(data) {
            console.log('succeeded!');
            _this.clicking = false;
            return _this.donePaying(data);
          };
        })(this)).fail((function(_this) {
          return function() {
            _this.clicking = false;
            return alert('Sorry, we were unable to complete your order. Please contact us if this keeps happening.');
          };
        })(this));
      }
    };

    GyroscopeStore.prototype.handleTokenPoster = function(token) {
      var order, orderData;
      if (token.id && this.posterType) {
        orderData = {
          item_type: this.posterType,
          stripe_token: token.id,
          details: this.details_string,
          address: this.address,
          city: this.city,
          state: this.state,
          zip: this.zip,
          country: this.country
        };
        order = JSON.stringify(orderData);
        return $.ajax({
          method: 'post',
          url: '/payment/token/poster/',
          data: order
        }).done((function(_this) {
          return function(data) {
            console.log('succeeded!');
            _this.clicking = false;
            return _this.donePaying(data);
          };
        })(this)).fail((function(_this) {
          return function() {
            _this.clicking = false;
            return alert('Sorry, we were unable to complete your order. Please contact us if this keeps happening.');
          };
        })(this));
      }
    };

    GyroscopeStore.prototype.donePaying = function() {
      return $('body').addClass('paid');
    };

    GyroscopeStore.prototype.bindAffiliateLinks = function() {
      $(document).on('click', '.fitbit-aria-affiliate-link', (function(_this) {
        return function(e) {
          return _this.trackProductClick('Fitbit Aria');
        };
      })(this));
      $(document).on('click', '.withings-scale-affiliate-link', (function(_this) {
        return function(e) {
          return _this.trackProductClick('Withings Scale');
        };
      })(this));
      $(document).on('click', '.fitbit-charge-affiliate-link', (function(_this) {
        return function(e) {
          return _this.trackProductClick('Fitbit Charge');
        };
      })(this));
      return $(document).on('click', '.apple-watch-affiliate-link', (function(_this) {
        return function(e) {
          return _this.trackProductClick('Apple Watch');
        };
      })(this));
    };

    GyroscopeStore.prototype.bindBundleLinks = function() {
      $(document).on('click', '.bundle-1', (function(_this) {
        return function(e) {
          return _this.trackBundleClick('1');
        };
      })(this));
      $(document).on('click', '.bundle-2', (function(_this) {
        return function(e) {
          return _this.trackBundleClick('2');
        };
      })(this));
      return $(document).on('click', '.bundle-3', (function(_this) {
        return function(e) {
          return _this.trackBundleClick('3');
        };
      })(this));
    };

    GyroscopeStore.prototype.trackProductClick = function(product) {
      if (analytics) {
        if (this.userId) {
          return analytics.track('Affiliate', {
            product: product,
            userId: this.userId,
            isPro: this.isPro
          });
        } else {
          return analytics.track('Affiliate', {
            product: product,
            anonymousId: 'guest'
          });
        }
      }
    };

    GyroscopeStore.prototype.trackBundleClick = function(num) {
      if (analytics) {
        if (this.userId) {
          return analytics.track('Bundle', {
            product: 'bundle-' + num,
            userId: this.userId,
            isPro: this.isPro
          });
        } else {
          return analytics.track('Bundle', {
            product: 'bundle-' + num,
            anonymousId: 'guest'
          });
        }
      }
    };

    GyroscopeStore.prototype.bindPosterPreview = function() {
      $(document).on('keypress', '.order-custom-title', (function(_this) {
        return function(e) {
          var input;
          input = $(e.currentTarget);
          return timeoutSet(10, function() {
            return _this.updateCityNameText(input);
          });
        };
      })(this));
      $(document).on('keydown', '.order-custom-title', (function(_this) {
        return function(e) {
          var input;
          input = $(e.currentTarget);
          return timeoutSet(15, function() {
            return _this.updateCityNameText(input);
          });
        };
      })(this));
      $(document).on('blur', '.order-custom-title', (function(_this) {
        return function(e) {
          var input;
          input = $(e.currentTarget);
          return timeoutSet(15, function() {
            return _this.updateCityNameText(input);
          });
        };
      })(this));
      return $(document).on('click', '.color-selector .color', (function(_this) {
        return function(e) {
          var color, item, selector;
          item = $(e.currentTarget);
          color = item.attr('data-color');
          if (!color) {
            return;
          }
          selector = item.parents('.color-selector');
          $('.selected', selector).removeClass('selected');
          item.addClass('selected');
          return $('#page .order-custom-color').val(color);
        };
      })(this));
    };

    GyroscopeStore.prototype.dehydrate = function(element) {
      var source;
      source = element.attr('data-src');
      element.attr('src', source);
      element.removeClass('dehydrated');
      return timeoutSet(600, function() {
        return element.addClass('hydrated');
      });
    };

    GyroscopeStore.prototype.bindCheckout = function() {
      $(document).on('click', '.back-to-order-stage-1', (function(_this) {
        return function(e) {
          var button;
          e.preventDefault();
          button = $(e.currentTarget);
          return $('body').removeClass('stage-2');
        };
      })(this));
      $(document).on('click', '.continue-to-order-stage-2', (function(_this) {
        return function(e) {
          var button;
          e.preventDefault();
          button = $(e.currentTarget);
          return $('body').addClass('stage-2');
        };
      })(this));
      $(document).on('click', '.select-canvas-poster', (function(_this) {
        return function(e) {
          var button;
          e.preventDefault();
          _this.posterType = 'canvas';
          $('#page .order-item-price').text('$199');
          $('#page .order-item-type-name').text('canvas print');
          button = $(e.currentTarget);
          return $('body').addClass('stage-2');
        };
      })(this));
      $(document).on('click', '.select-print-poster', (function(_this) {
        return function(e) {
          var button;
          e.preventDefault();
          _this.posterType = 'print';
          $('#page .order-item-price').text('$99');
          $('#page .order-item-type-name').text('printed poster');
          button = $(e.currentTarget);
          return $('body').addClass('stage-2');
        };
      })(this));
      $(document).on('click', '.select-frame-poster', (function(_this) {
        return function(e) {
          var button;
          e.preventDefault();
          _this.posterType = 'frame';
          $('#page .order-item-price').text('$249');
          $('#page .order-item-type-name').text('framed print');
          button = $(e.currentTarget);
          return $('body').addClass('stage-2');
        };
      })(this));
      $(document).on('change', '.country-dropdown', (function(_this) {
        return function(e) {
          var dropdown, form, value;
          dropdown = $(e.currentTarget);
          form = dropdown.parents('form.shipping');
          value = dropdown.val();
          console.log(value);
          if (value) {
            return $('body').addClass('country-selected');
          } else {
            return $('body').removeClass('country-selected');
          }
        };
      })(this));
      $(document).on('click', '.poster-purchase-checkout', (function(_this) {
        return function(e) {
          var color, description, email, requests, style, title;
          e.preventDefault();
          email = $('#page .shipping-email').val();
          if (!email) {
            _this.formValidationError('Please enter your email address. We will need to contact you to design and deliver your order!');
            return;
          }
          color = $('#page .order-custom-color').val();
          requests = $('#page .order-requests').val();
          title = $('#page .order-custom-title').val();
          style = $('#page .order-style').val();
          _this.details_string = 'Email: ' + email + ' Format: ' + _this.posterType;
          if (color) {
            _this.details_string += '. Color: ' + color;
          }
          if (requests) {
            _this.details_string += '. Other requests: ' + requests;
          }
          if (title) {
            _this.details_string += '. Title: ' + title + '...';
          }
          _this.country = $('#page .country-dropdown').val();
          _this.address = $('#page .shipping-address').val();
          _this.city = $('#page .shipping-city').val();
          _this.state = $('#page .shipping-state').val();
          _this.zip = $('#page .shipping-zip').val();
          if (!_this.country) {
            _this.formValidationError('Please enter a country for shipping, so we can send your order to the right place!');
            return;
          }
          if (!_this.address) {
            _this.formValidationError('Please enter a address for shipping, so we can send your order to the right place!');
            return;
          }
          if (!_this.state) {
            _this.formValidationError('Please enter a state for shipping, so we can send your order to the right place!');
            return;
          }
          if (!_this.city) {
            _this.formValidationError('Please enter a city for shipping, so we can send your order to the right place!');
            return;
          }
          if (!_this.zip) {
            _this.formValidationError('Please enter a zip code for shipping, so we can send your order to the right place!');
            return;
          }
          if (_this.posterType === 'print') {
            description = 'Print · $114 shipped';
          } else if (_this.posterType === 'canvas') {
            description = 'Canvas print · $214 shipped';
          } else {
            description = 'Framed print · $264 shipped';
          }
          return _this.stripeHandlerPoster.open({
            description: description,
            panelLabel: 'Purchase',
            zipCode: true,
            allowRememberMe: false,
            opened: function() {
              _this.clicking = false;
              return $('body').addClass('checkout-opened');
            },
            closed: function() {
              _this.clicking = false;
              return $('body').removeClass('checkout-opened');
            }
          });
        };
      })(this));
      return $(document).on('click', '.book-purchase-checkout', (function(_this) {
        return function(e) {
          var color, dedication, email, requests;
          e.preventDefault();
          dedication = $('#page .order-dedication').val();
          color = $('#page .order-custom-color').val();
          requests = $('#page .order-requests').val();
          email = $('#page .shipping-email').val();
          if (!email) {
            _this.formValidationError('Please enter your email address. We will need to contact you to design and deliver your order!');
            return;
          }
          _this.details_string = 'Contact email: ' + email;
          if (dedication) {
            _this.details_string += '. Dedicated to: ' + dedication;
          }
          if (color) {
            _this.details_string += '. Favorite color: ' + color;
          }
          if (requests) {
            _this.details_string += '. Requests: ' + requests + '...';
          }
          _this.country = $('#page .country-dropdown').val();
          _this.address = $('#page .shipping-address').val();
          _this.city = $('#page .shipping-city').val();
          _this.state = $('#page .shipping-state').val();
          _this.zip = $('#page .shipping-zip').val();
          if (!_this.country) {
            _this.formValidationError('Please enter a country for shipping, so we can send your order to the right place!');
            return;
          }
          if (!_this.address) {
            _this.formValidationError('Please enter a address for shipping, so we can send your order to the right place!');
            return;
          }
          if (!_this.state) {
            _this.formValidationError('Please enter a state for shipping, so we can send your order to the right place!');
            return;
          }
          if (!_this.city) {
            _this.formValidationError('Please enter a city for shipping, so we can send your order to the right place!');
            return;
          }
          if (!_this.zip) {
            _this.formValidationError('Please enter a zip code for shipping, so we can send your order to the right place!');
            return;
          }
          return _this.stripeHandlerBook.open({
            description: 'Your 2017 Book · $249',
            panelLabel: 'Purchase',
            zipCode: true,
            allowRememberMe: false,
            opened: function() {
              _this.clicking = false;
              return $('body').addClass('checkout-opened');
            },
            closed: function() {
              _this.clicking = false;
              return $('body').removeClass('checkout-opened');
            }
          });
        };
      })(this));
    };

    GyroscopeStore.prototype.formValidationError = function(message) {
      return alert(message);
    };

    GyroscopeStore.prototype.updateCityNameText = function(input) {
      var display;
      if (!input) {
        input = $('#page .order-custom-title');
      }
      display = $('#page .poster-city-name-text');
      if (input.val()) {
        return display.text(input.val());
      } else {
        return display.text(display.attr('data-default'));
      }
    };

    GyroscopeStore.prototype.loadFacebookJs = function() {
      var el;
      if ($('#fb-root').length && FB) {
        return FB.XFBML.parse();
      } else {
        el = '<div id="fb-root"></div>\n<script id="fb-script">(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&appId=309431422557180&version=v2.4";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, \'script\', \'facebook-jssdk\'));</script>';
        return $('body').append(el);
      }
    };

    GyroscopeStore.prototype.loadTwitterJs = function() {
      return $('#page').append('<script async src="//platform.twitter.com/widgets.js" charset="utf-8" />');
    };

    return GyroscopeStore;

  })();

  window.GyroscopeThemes = (function() {
    function GyroscopeThemes() {
      this.bindThemeSelector();
    }

    GyroscopeThemes.prototype.init = function() {};

    GyroscopeThemes.prototype.bindThemeSelector = function() {
      return $(document).on('click', '#page .theme-selection .switch-theme', (function(_this) {
        return function(e) {
          var clicked_id, form, li, link, select, selected_id;
          e.preventDefault();
          _this.oldTheme = $('#selected-theme').attr('data-name');
          link = $(e.currentTarget);
          li = link.parents('li');
          form = li.parents('.theme-selection').find('form');
          select = form.find('select').first();
          clicked_id = link.attr('data-id');
          selected_id = select.val();
          if (clicked_id === selected_id) {
            return;
          }
          $('#page .theme-selection li.selected').removeClass('selected');
          select.val(clicked_id);
          li.addClass('selected');
          if (_this.themeChange) {
            _this.themeChange.abort();
          }
          return _this.themeChange = $.ajax({
            method: 'post',
            dataType: 'html',
            url: form.attr('action'),
            data: form.serialize()
          }).done(function(data) {
            _this.newTheme = $(data).find('#selected-theme').attr('data-name');
            return analytics.track('Changed Theme', {
              New: _this.newTheme,
              Old: _this.oldTheme
            });
          });
        };
      })(this));
    };

    return GyroscopeThemes;

  })();

  window.GyroscopeVault = (function() {
    function GyroscopeVault() {
      this.bindUnlock();
      this.bindLockdown();
      this.bindDNAUpload();
    }

    GyroscopeVault.prototype.init = function() {
      return this.dropzoneInitialized = false;
    };

    GyroscopeVault.prototype.bindUnlock = function() {
      $(document).on('click', '.open-vault', (function(_this) {
        return function(e) {
          e.preventDefault();
          $('body').addClass('vault-opened vault-intro');
          return timeoutSet(800, function() {
            return $('body').removeClass('vault-intro');
          });
        };
      })(this));
      return $(document).on('click', '.close-vault', (function(_this) {
        return function(e) {
          e.preventDefault();
          $('body').addClass('intro vault-closing');
          timeoutSet(80, function() {
            return $('body').removeClass('vault-opened vault-intro');
          });
          return timeoutSet(800, function() {
            return $('body').removeClass('intro vault-closing');
          });
        };
      })(this));
    };

    GyroscopeVault.prototype.bindLockdown = function() {
      $(document).on('click', '.move-to-profile', (function(_this) {
        return function(e) {
          var category, id;
          e.preventDefault();
          category = $(e.currentTarget).parents('.category');
          id = category.attr('data-id');
          console.log('send status to server');
          _this.updateVaultSettings(id, 'false');
          return category.removeClass('in-vault').addClass('in-profile');
        };
      })(this));
      return $(document).on('click', '.move-to-vault', (function(_this) {
        return function(e) {
          var category, id;
          e.preventDefault();
          category = $(e.currentTarget).parents('.category');
          id = category.attr('data-id');
          console.log('send status to server');
          _this.updateVaultSettings(id, 'true');
          return category.addClass('in-vault').removeClass('in-profile');
        };
      })(this));
    };

    GyroscopeVault.prototype.updateVaultSettings = function(item, status) {
      var config;
      config = {};
      config['hide_' + item] = status;
      return this.vaultSettings = $.ajax({
        method: 'post',
        dataType: 'text',
        url: '/settings/vault_preferences/',
        data: config,
        success: (function(_this) {
          return function(data) {
            return console.log('Complete', data);
          };
        })(this),
        error: function(data) {
          return console.log("Error changing units: " + config);
        }
      });
    };

    GyroscopeVault.prototype.bindDNAUpload = function() {
      return $(document).on('click', '.open-dna-uploader', (function(_this) {
        return function(e) {
          var opened;
          e.preventDefault();
          opened = $('body').hasClass('dna-uploadable');
          if (opened) {
            return $('body').removeClass('dna-uploadable');
          } else {
            $('body').addClass('dna-uploadable');
            if (!_this.dropzoneInitialized) {
              _this.setupDropzone();
              return _this.dropzoneInitialized = true;
            }
          }
        };
      })(this));
    };

    GyroscopeVault.prototype.setupDropzone = function() {
      var bar, token, uploader, url;
      console.log('Initialize upload form');
      uploader = $('#page .dna.upload-area').addClass('initialized');
      url = 'https://api.gyrosco.pe/v1/account/genome/';
      token = uploader.attr('data-token');
      if (!token) {
        alert('Invalid token');
        return;
      }
      bar = $('.progress-bar .fill', uploader);
      return $('#dna-fileupload').fileupload({
        url: url,
        dataType: 'json',
        headers: {
          "X-Totem-Token-Id": token
        },
        xhrFields: {
          withCredentials: true
        },
        add: function(e, data) {
          var file, seems_valid;
          seems_valid = false;
          if (data.files) {
            file = data.files[0];
            if (file.type !== 'text/plain') {
              alert('Please upload a valid text file, not a zip file.');
              return;
            }
            if (file.name.indexOf('genome_') >= 0) {
              data.submit();
              $('body').addClass('dna-uploading');
              return timeoutSet(20, function() {
                return bar.addClass('showing');
              });
            } else {
              alert('Please upload a valid DNA file from 23&me');
            }
          }
        },
        progressall: function(e, data) {
          var progress;
          progress = parseInt(data.loaded / data.total * 100, 10);
          console.log(progress);
          return bar.css({
            'width': progress + '%'
          });
        },
        done: function(e, data) {
          return $('body').addClass('dna-uploaded');
        }
      });
    };

    return GyroscopeVault;

  })();

  window.GyroscopeWaitlist = (function() {
    function GyroscopeWaitlist() {}

    GyroscopeWaitlist.prototype.init = function() {
      console.log('waitlist');
      this.dropzoneInitialized = false;
      $('body').addClass('photo-uploadable');
      if (!this.dropzoneInitialized) {
        this.setupDropzone();
        return this.dropzoneInitialized = true;
      }
    };

    GyroscopeWaitlist.prototype.setupDropzone = function() {
      var bar, token, uploader, url;
      console.log('Initialize upload form');
      uploader = $('#page .photo.upload-area').addClass('initialized');
      if (!uploader.length) {
        return;
      }
      url = 'http://gyroscopedev.com:7000/v1/account/profile-picture/';
      url = 'https://api.gyrosco.pe/v1/account/profile-picture/';
      token = uploader.attr('data-token');
      if (!token) {
        console.log('Invalid token');
        return;
      }
      bar = $('.progress-bar .fill', uploader);
      return $('#photo-fileupload').fileupload({
        url: url,
        dataType: 'json',
        headers: {
          "X-Totem-Token-Id": token
        },
        xhrFields: {
          withCredentials: true
        },
        add: function(e, data) {
          var file, seems_valid;
          seems_valid = false;
          if (data.files) {
            file = data.files[0];
            if (file.type !== 'image/png' && file.type !== 'image/jpeg') {
              alert('Please upload a valid image file.');
              return;
            }
            data.submit();
            $('body').addClass('photo-uploading');
            return timeoutSet(20, function() {
              return bar.addClass('showing');
            });
          }
        },
        progressall: function(e, data) {
          var progress;
          progress = parseInt(data.loaded / data.total * 100, 10);
          return bar.css({
            'width': progress + '%'
          });
        },
        done: function(e, data) {
          return $('body').addClass('photo-uploaded');
        }
      });
    };

    return GyroscopeWaitlist;

  })();

}).call(this);
